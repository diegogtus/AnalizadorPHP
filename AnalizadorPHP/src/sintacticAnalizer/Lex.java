/* The following code was generated by JFlex 1.6.1 */

/*IMPORTACIONES*/
package sintacticAnalizer;
import static sintacticAnalizer.Token.*;

//DEFINICIONES

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/diego/NetBeansProjects/AnalizadorPHP/AnalizadorPHP/src/sintacticAnalizer/Lexer.flex</tt>
 */
class Lex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\70\1\71\1\71\1\70\22\0\1\20\1\61\1\67"+
    "\1\0\1\64\1\60\1\62\1\73\1\11\1\12\1\22\1\57\1\17"+
    "\1\57\1\16\1\21\1\2\1\10\6\6\2\3\1\0\1\15\1\23"+
    "\1\61\1\27\1\24\1\0\1\5\1\5\1\5\1\5\1\65\1\56"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\66\1\1\1\1\1\1\1\4\2\1\1\13"+
    "\1\0\1\14\1\0\1\30\1\0\1\31\1\7\1\34\1\44\1\40"+
    "\1\50\1\54\1\26\1\37\1\1\1\46\1\32\1\36\1\43\1\35"+
    "\1\25\1\55\1\41\1\42\1\33\1\47\1\52\1\51\1\53\1\45"+
    "\1\1\1\15\1\63\1\15\1\0\6\1\1\72\172\1\u1f28\0\1\71"+
    "\1\71\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\2\2\4\1\5\2\6"+
    "\1\7\1\1\1\2\1\7\23\2\2\6\3\1\1\2"+
    "\1\1\1\5\1\2\1\1\2\0\1\10\1\3\1\11"+
    "\5\0\1\2\2\4\1\12\1\6\6\0\1\13\5\2"+
    "\1\13\7\2\1\13\31\2\1\0\3\14\1\2\2\0"+
    "\1\15\1\4\1\10\2\0\1\15\1\12\2\3\2\11"+
    "\1\2\30\0\45\2\1\13\5\2\1\14\1\2\2\12"+
    "\1\2\46\0\31\2\1\10\7\2\1\14\1\16\42\0"+
    "\1\13\4\0\25\2\1\13\2\2\1\14\37\0\14\2"+
    "\1\14\23\0\1\13\2\0\4\2\1\13\2\2\1\10"+
    "\1\14\13\0\3\2\1\0\1\14\4\0\1\13\2\0"+
    "\2\2\2\0\1\14\3\0\1\2\2\0\1\14\2\0"+
    "\1\2\4\0\1\2\6\0\1\2\1\12\2\17\2\20"+
    "\1\0\1\2\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744"+
    "\0\u0780\0\u07bc\0\u07f8\0\74\0\u0834\0\u0870\0\u08ac\0\u08e8"+
    "\0\u0924\0\u0960\0\u099c\0\u09d8\0\74\0\u0a14\0\74\0\u0a50"+
    "\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\74"+
    "\0\u0c30\0\u0c6c\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0834"+
    "\0\u0870\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00"+
    "\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0"+
    "\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0"+
    "\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0"+
    "\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680"+
    "\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u0924\0\u1824"+
    "\0\u0924\0\u1860\0\u0c30\0\u09d8\0\u189c\0\u09d8\0\74\0\u0ac8"+
    "\0\u0b04\0\u0b40\0\u0bb8\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8"+
    "\0\u02d0\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c"+
    "\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c"+
    "\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c"+
    "\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c"+
    "\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec"+
    "\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc"+
    "\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac"+
    "\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c"+
    "\0\u28c8\0\u0924\0\u09d8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4"+
    "\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4"+
    "\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4"+
    "\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94"+
    "\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174"+
    "\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354"+
    "\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534"+
    "\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8\0\u3714"+
    "\0\u3750\0\u378c\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4"+
    "\0\u3930\0\u396c\0\u39a8\0\u39e4\0\170\0\u3a20\0\u3a5c\0\u3a98"+
    "\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78"+
    "\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\u3e58"+
    "\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc\0\u4038"+
    "\0\u4074\0\u40b0\0\u40ec\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u4218"+
    "\0\u4254\0\u4290\0\u42cc\0\u4308\0\u4344\0\u4380\0\u43bc\0\u43f8"+
    "\0\u4434\0\u4470\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8"+
    "\0\u4614\0\u4650\0\u468c\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8"+
    "\0\u47f4\0\u4830\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998"+
    "\0\u49d4\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78"+
    "\0\u4bb4\0\u4bf0\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58"+
    "\0\u4d94\0\u4dd0\0\u4e0c\0\u4e48\0\u4e84\0\u3804\0\u4ec0\0\u4efc"+
    "\0\u4f38\0\u4f74\0\u4fb0\0\u4fec\0\u5028\0\u5064\0\u50a0\0\u50dc"+
    "\0\u5118\0\u5154\0\u5190\0\u51cc\0\u5208\0\u5244\0\u5280\0\u52bc"+
    "\0\u52f8\0\u5334\0\u5370\0\u53ac\0\u53e8\0\u5424\0\u5460\0\u549c"+
    "\0\u54d8\0\u5514\0\u5550\0\u558c\0\u55c8\0\u5604\0\u5640\0\u567c"+
    "\0\u56b8\0\u56f4\0\u5730\0\u576c\0\u57a8\0\u57e4\0\u5820\0\u585c"+
    "\0\u5898\0\u58d4\0\u5910\0\u594c\0\u5988\0\u59c4\0\u5a00\0\u5a3c"+
    "\0\u5a78\0\u5ab4\0\u5af0\0\u5b2c\0\u5b68\0\u5ba4\0\u5be0\0\u5c1c"+
    "\0\u5c58\0\u5c94\0\u5cd0\0\u5d0c\0\u5d48\0\u5d84\0\u5dc0\0\u5dfc"+
    "\0\u5e38\0\u5e74\0\u5eb0\0\u5eec\0\u5f28\0\u5f64\0\u5fa0\0\u5fdc"+
    "\0\u6018\0\u6054\0\u6090\0\u60cc\0\u6108\0\u6144\0\u6180\0\u61bc"+
    "\0\u61f8\0\u6234\0\u6270\0\u62ac\0\u62e8\0\u6324\0\u6360\0\u639c"+
    "\0\u63d8\0\u6414\0\u6450\0\u648c\0\u64c8\0\u6504\0\u6540\0\u657c"+
    "\0\u65b8\0\u65f4\0\u6360\0\u6360\0\u639c\0\74\0\u0c30\0\u6630"+
    "\0\u666c\0\u66a8\0\u66e4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\3\1\5\1\6\1\5"+
    "\5\7\1\10\1\7\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\3\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\3\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\3\1\35\1\36\1\37\1\3\1\40\1\41"+
    "\1\3\1\42\1\43\1\44\1\17\1\45\1\46\1\47"+
    "\1\3\1\50\1\51\1\52\1\0\1\53\1\54\22\55"+
    "\1\56\45\55\3\0\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\27\3\6\55\2\3\1\55\2\0"+
    "\1\53\3\55\1\60\1\61\1\62\1\55\1\60\1\63"+
    "\1\60\5\55\1\64\3\55\1\56\15\55\1\65\12\55"+
    "\1\62\3\55\1\66\5\55\1\65\2\55\3\0\3\55"+
    "\2\5\2\55\1\5\1\55\1\5\5\55\1\64\3\55"+
    "\1\56\15\55\1\65\16\55\1\66\5\55\1\65\2\55"+
    "\3\0\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\11\3\1\67\15\3\6\55\2\3\1\55\2\0"+
    "\1\53\21\55\1\70\1\55\1\56\45\55\1\71\2\0"+
    "\3\55\2\64\2\55\1\64\1\55\1\64\7\55\1\70"+
    "\1\55\1\56\45\55\1\71\2\0\12\55\7\7\2\55"+
    "\1\56\45\55\3\0\22\55\2\72\45\55\3\0\1\55"+
    "\22\72\1\73\45\72\3\0\1\72\22\55\1\56\1\17"+
    "\1\74\2\55\1\17\1\55\1\75\3\55\1\76\15\55"+
    "\1\77\5\55\1\17\1\100\1\101\4\55\3\0\23\55"+
    "\1\56\4\55\1\102\40\55\3\0\2\55\10\3\1\57"+
    "\10\55\1\56\2\55\2\3\1\55\11\3\1\103\5\3"+
    "\1\104\7\3\6\55\2\3\1\55\2\0\1\53\23\55"+
    "\1\56\1\17\3\55\1\17\1\55\1\75\3\55\1\76"+
    "\15\55\1\77\5\55\1\17\1\100\1\101\4\55\3\0"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\1\105\26\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\6\3\1\106\1\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\11\3\1\107\1\110\1\111\13\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\7\3\1\112\17\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\1\3\1\113\1\55\11\3\1\114\15\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\10\55"+
    "\1\56\2\55\2\3\1\55\1\3\1\115\1\116\2\3"+
    "\1\117\21\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\10\55\1\56\2\55\2\3\1\55\11\3"+
    "\1\120\15\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\10\55\1\56\2\55\2\3\1\55\6\3"+
    "\1\121\3\3\1\122\1\123\4\3\1\110\6\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\10\55"+
    "\1\56\2\55\2\3\1\55\2\3\1\124\1\3\1\125"+
    "\1\3\1\126\4\3\1\127\6\3\1\130\1\131\3\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\10\55\1\56\2\55\2\3\1\55\10\3\1\132\16\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\10\55\1\56\2\55\2\3\1\55\3\3\1\133\15\3"+
    "\1\134\5\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\10\55\1\56\2\55\2\3\1\55\1\3"+
    "\1\135\6\3\1\136\16\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\5\3\1\110\1\3\1\137\1\140\16\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\10\55"+
    "\1\56\2\55\2\3\1\55\7\3\1\141\17\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\10\55"+
    "\1\56\2\55\2\3\1\55\12\3\1\142\1\122\13\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\10\55\1\56\2\55\2\3\1\55\5\3\1\143\1\3"+
    "\1\144\7\3\1\145\7\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\1\3"+
    "\1\146\1\55\27\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\5\3\1\25\21\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\2\3\1\147\2\3\1\150\21\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\1\3\1\151\25\3\6\55\2\3\1\55"+
    "\2\0\1\53\3\55\1\4\1\5\2\55\1\5\1\55"+
    "\1\5\5\55\1\152\3\55\1\56\45\55\3\0\23\55"+
    "\1\56\37\55\1\17\5\55\3\0\23\55\1\56\40\55"+
    "\1\17\4\55\3\0\2\55\1\153\2\55\2\153\1\55"+
    "\1\153\12\55\1\56\2\55\2\153\1\55\11\153\1\154"+
    "\15\153\6\55\2\153\1\55\2\0\1\155\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\11\3\1\156"+
    "\15\3\6\55\2\3\1\55\2\0\1\53\1\55\22\157"+
    "\1\160\44\157\1\161\3\0\1\157\11\0\7\162\55\0"+
    "\10\53\1\163\13\0\2\53\1\0\27\53\6\0\2\53"+
    "\3\0\1\53\1\0\22\164\1\165\45\164\3\0\1\166"+
    "\21\55\1\167\1\56\45\55\3\0\3\55\1\60\1\61"+
    "\2\55\1\60\1\55\1\60\5\55\1\64\3\55\1\56"+
    "\15\55\1\65\16\55\1\66\5\55\1\65\2\55\3\0"+
    "\3\55\2\61\2\55\1\61\1\55\1\61\5\55\1\64"+
    "\3\55\1\56\15\55\1\65\16\55\1\66\5\55\1\65"+
    "\2\55\3\0\3\55\2\170\1\55\4\170\11\55\1\56"+
    "\6\55\1\170\2\55\1\170\3\55\1\170\3\55\1\170"+
    "\3\55\1\170\5\55\1\170\6\55\1\170\2\55\3\0"+
    "\3\55\1\171\5\55\1\171\11\55\1\56\45\55\3\0"+
    "\3\55\2\172\2\55\1\172\1\55\1\172\11\55\1\56"+
    "\15\55\1\65\16\55\1\66\5\55\1\65\2\55\3\0"+
    "\3\55\2\173\2\55\1\173\1\55\1\173\11\55\1\56"+
    "\34\55\1\66\10\55\3\0\3\55\2\173\2\55\1\173"+
    "\1\55\1\173\11\55\1\56\45\55\3\0\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\10\3\1\174"+
    "\16\3\6\55\2\3\1\55\2\0\1\53\1\55\74\0"+
    "\70\72\3\0\1\72\22\55\1\56\2\55\1\175\42\55"+
    "\3\0\23\55\1\56\20\55\1\176\24\55\3\0\23\55"+
    "\1\56\16\55\1\17\26\55\3\0\23\55\1\56\12\55"+
    "\1\76\32\55\3\0\10\55\1\177\12\55\1\56\1\200"+
    "\1\201\1\202\2\55\1\203\1\204\1\205\1\206\1\207"+
    "\1\210\1\55\1\211\1\212\1\213\1\214\1\215\1\216"+
    "\1\217\1\55\1\220\1\221\1\222\1\55\1\223\1\224"+
    "\13\55\3\0\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\5\3\1\225\1\3\1\226\17\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\6\3\1\227\1\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\27\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\10\55"+
    "\1\56\2\55\1\3\1\230\1\55\27\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\12\3\1\231\14\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\11\3\1\232\15\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\6\3\1\6\1\3\1\57"+
    "\10\55\1\56\1\200\1\201\1\16\1\3\1\55\1\20"+
    "\1\233\1\22\1\23\1\24\1\234\1\3\1\26\1\27"+
    "\1\30\1\31\1\32\1\235\1\34\1\3\1\35\1\36"+
    "\1\37\1\3\1\236\1\41\2\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\14\3\1\120\12\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\12\3\1\237\14\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\11\3\1\240\15\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\1\3\1\241\13\3\1\110\11\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\10\55"+
    "\1\56\2\55\2\3\1\55\2\3\1\242\1\243\6\3"+
    "\1\142\14\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\10\55\1\56\2\55\2\3\1\55\1\3"+
    "\1\244\3\3\1\245\21\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\13\3\1\246\13\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\6\3\1\6\1\3\1\57\10\55\1\56"+
    "\1\14\1\201\1\16\1\3\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\3\1\26\1\27\1\30\1\31"+
    "\1\32\1\235\1\34\1\3\1\35\1\36\1\37\1\3"+
    "\1\40\1\41\2\3\2\55\1\17\1\100\1\101\1\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\10\55"+
    "\1\56\2\55\1\247\1\3\1\55\27\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\12\3\1\250\14\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\3\3\1\251\1\252\5\3\1\253"+
    "\14\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\12\3\1\142"+
    "\14\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\1\3\1\254\1\55\27\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\10\55\1\56\2\55\1\255\1\3\1\55\27\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\10\55"+
    "\1\56\2\55\2\3\1\55\14\3\1\256\12\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\10\55"+
    "\1\56\2\55\2\3\1\55\1\3\1\257\25\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\10\55"+
    "\1\56\2\55\2\3\1\55\3\3\1\260\3\3\1\237"+
    "\17\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\3\3\1\261"+
    "\21\3\1\262\1\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\1\3\1\263\25\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\7\3\1\264\17\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\6\3\1\265\20\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\21\3\1\110\5\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\10\3\1\266\16\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\4\3\1\267\13\3\1\270\6\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\10\3\1\271\16\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\10\3\1\110\16\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\11\3\1\272\15\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\13\3\1\273\13\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\13\3\1\274\13\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\7\3\1\275\17\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\5\3\1\276\21\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\3\3\1\254\23\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\2\3\1\277\24\3\6\55\2\3\1\55"+
    "\2\0\1\53\3\55\2\64\2\55\1\64\1\55\1\64"+
    "\11\55\1\56\45\55\3\0\2\55\10\153\11\55\1\56"+
    "\2\55\2\153\1\55\27\153\6\55\2\153\1\55\2\0"+
    "\1\155\2\55\10\153\11\55\1\56\2\55\2\153\1\55"+
    "\10\153\1\300\16\153\6\55\2\153\1\55\2\0\1\155"+
    "\1\55\1\0\10\155\14\0\2\155\1\0\27\155\6\0"+
    "\2\155\3\0\1\155\1\0\1\55\10\3\1\57\10\55"+
    "\1\56\2\55\2\3\1\55\17\3\1\301\7\3\6\55"+
    "\2\3\1\55\2\0\1\53\1\55\21\157\1\302\1\160"+
    "\44\157\1\161\3\0\1\157\20\0\1\71\47\0\1\71"+
    "\3\0\21\164\1\303\1\165\45\164\3\0\1\166\1\55"+
    "\10\3\1\57\10\55\1\56\2\55\2\3\1\55\1\3"+
    "\1\304\25\3\6\55\2\3\1\55\2\0\1\53\23\55"+
    "\1\56\3\55\1\305\41\55\3\0\23\55\1\56\21\55"+
    "\1\17\23\55\3\0\23\55\1\56\16\55\1\306\26\55"+
    "\3\0\23\55\1\56\1\55\1\74\43\55\3\0\23\55"+
    "\1\56\16\55\1\307\5\55\1\310\20\55\3\0\23\55"+
    "\1\56\5\55\1\311\37\55\3\0\10\55\1\312\12\55"+
    "\1\56\16\55\1\313\1\102\1\314\24\55\3\0\23\55"+
    "\1\56\14\55\1\315\30\55\3\0\23\55\1\56\3\55"+
    "\1\316\12\55\1\317\26\55\3\0\23\55\1\56\6\55"+
    "\1\320\1\321\2\55\1\322\32\55\3\0\23\55\1\56"+
    "\16\55\1\102\26\55\3\0\23\55\1\56\13\55\1\323"+
    "\3\55\1\324\1\325\4\55\1\102\17\55\3\0\23\55"+
    "\1\56\7\55\1\326\1\55\1\327\1\55\1\330\4\55"+
    "\1\331\6\55\1\332\1\333\14\55\3\0\23\55\1\56"+
    "\15\55\1\334\27\55\3\0\23\55\1\56\10\55\1\335"+
    "\15\55\1\336\16\55\3\0\23\55\1\56\6\55\1\337"+
    "\6\55\1\340\27\55\3\0\23\55\1\56\12\55\1\102"+
    "\1\55\1\341\1\342\27\55\3\0\23\55\1\56\14\55"+
    "\1\343\30\55\3\0\23\55\1\56\17\55\1\344\1\324"+
    "\24\55\3\0\23\55\1\56\12\55\1\345\1\55\1\346"+
    "\7\55\1\347\20\55\3\0\23\55\1\56\3\55\1\350"+
    "\41\55\3\0\23\55\1\56\12\55\1\210\32\55\3\0"+
    "\23\55\1\56\7\55\1\351\2\55\1\352\32\55\3\0"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\3\3\1\353\23\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\13\3\1\110\6\3\1\354\4\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\2\3\1\355\24\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\1\3\1\356\25\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\3\3\1\357\23\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\1\3\1\360\25\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\6\3\1\106\1\3\1\57\10\55"+
    "\1\56\2\55\2\3\1\55\11\3\1\107\1\110\1\361"+
    "\13\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\11\3\1\110"+
    "\15\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\5\3\1\110"+
    "\1\3\1\137\1\362\16\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\5\3\1\234\21\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\3\3\1\266\23\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\5\3\1\136\21\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\7\3\1\363\17\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\2\3\1\364\24\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\4\3\1\365\22\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\12\3\1\366\14\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\13\3\1\142\13\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\3\3\1\367\6\3\1\363\14\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\2\3\1\370\24\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\10\3\1\237\16\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\10\3\1\371\16\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\2\3\1\372\24\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\3\3\1\373\23\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\5\3\1\110\21\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\3\3\1\360\23\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\7\3\1\374\2\3\1\375\1\3"+
    "\1\376\3\3\1\377\1\37\5\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\2\3\1\266\24\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\10\3\1\u0100\16\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\17\3\1\u0101\7\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\17\3\1\u0102\7\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\3\3\1\355\23\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\3\3\1\243\23\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\10\3\1\u0103\16\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\u0104\10\55\1\56\2\55"+
    "\2\3\1\55\27\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\2\3\1\u0105\24\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\1\3\1\u0106\5\3\1\u0107\17\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\2\3\1\361\24\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\6\3\1\6\1\3\1\57\10\55"+
    "\1\56\1\200\1\201\1\16\1\3\1\55\1\20\1\233"+
    "\1\22\1\23\1\24\1\234\1\3\1\26\1\u0108\1\30"+
    "\1\31\1\32\1\235\1\34\1\3\1\35\1\36\1\37"+
    "\1\3\1\236\1\41\2\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\1\3\1\u0109\25\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\4\3\1\u010a\22\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\2\3\1\142\24\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\6\3\1\u010b\1\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\27\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\12\3\1\301\14\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\153\11\55\1\56\2\55\2\153\1\55"+
    "\4\153\1\u010c\22\153\6\55\2\153\1\55\2\0\1\155"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\10\3\1\u010d\16\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\16\3\1\110\10\3\6\55\2\3\1\55\2\0\1\53"+
    "\23\55\1\56\2\55\1\102\42\55\3\0\23\55\1\56"+
    "\15\55\1\u010e\27\55\3\0\23\55\1\56\12\55\1\u010f"+
    "\1\55\1\u0110\30\55\3\0\10\55\1\u0111\12\55\1\56"+
    "\45\55\3\0\23\55\1\56\3\55\1\u0112\41\55\3\0"+
    "\23\55\1\56\17\55\1\u0113\25\55\3\0\23\55\1\56"+
    "\16\55\1\u0114\26\55\3\0\23\55\1\56\21\55\1\102"+
    "\23\55\3\0\23\55\1\56\17\55\1\u0115\25\55\3\0"+
    "\23\55\1\56\16\55\1\u0116\26\55\3\0\23\55\1\56"+
    "\6\55\1\u0117\13\55\1\102\22\55\3\0\23\55\1\56"+
    "\7\55\1\u0118\1\u0119\6\55\1\344\25\55\3\0\23\55"+
    "\1\56\6\55\1\u011a\3\55\1\u011b\32\55\3\0\23\55"+
    "\1\56\20\55\1\u011c\24\55\3\0\23\55\1\56\2\55"+
    "\1\u011d\42\55\3\0\23\55\1\56\17\55\1\u011e\25\55"+
    "\3\0\23\55\1\56\10\55\1\u011f\1\u0120\5\55\1\u0121"+
    "\25\55\3\0\23\55\1\56\17\55\1\344\25\55\3\0"+
    "\23\55\1\56\3\55\1\u0122\41\55\3\0\23\55\1\56"+
    "\2\55\1\u0123\42\55\3\0\23\55\1\56\21\55\1\u0124"+
    "\23\55\3\0\23\55\1\56\6\55\1\u0125\36\55\3\0"+
    "\23\55\1\56\10\55\1\u0126\3\55\1\u0115\30\55\3\0"+
    "\23\55\1\56\10\55\1\u0127\21\55\1\u0128\12\55\3\0"+
    "\23\55\1\56\6\55\1\u0129\36\55\3\0\23\55\1\56"+
    "\14\55\1\u012a\30\55\3\0\23\55\1\56\13\55\1\u012b"+
    "\31\55\3\0\23\55\1\56\26\55\1\102\16\55\3\0"+
    "\23\55\1\56\15\55\1\u012c\27\55\3\0\23\55\1\56"+
    "\11\55\1\u012d\13\55\1\u012e\17\55\3\0\23\55\1\56"+
    "\15\55\1\u012f\27\55\3\0\23\55\1\56\15\55\1\102"+
    "\27\55\3\0\23\55\1\56\16\55\1\u0130\26\55\3\0"+
    "\23\55\1\56\20\55\1\u0131\24\55\3\0\23\55\1\56"+
    "\20\55\1\u0132\24\55\3\0\23\55\1\56\14\55\1\u0133"+
    "\30\55\3\0\23\55\1\56\12\55\1\u0134\32\55\3\0"+
    "\23\55\1\56\10\55\1\u0122\34\55\3\0\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\10\3\1\u0135"+
    "\16\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\1\3\1\u0136"+
    "\25\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\7\3\1\u0137"+
    "\17\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\2\3\1\u0138"+
    "\24\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\11\3\1\u0139"+
    "\15\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\15\3\1\266"+
    "\11\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\14\3\1\110"+
    "\12\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\4\3\1\267"+
    "\13\3\1\u013a\6\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\3\3\1\110\23\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\1\3\1\u013b\25\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\1\3\1\110"+
    "\1\55\27\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\10\55\1\56\2\55\2\3\1\55\12\3"+
    "\1\110\14\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\10\55\1\56\2\55\2\3\1\55\7\3"+
    "\1\u013c\17\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\10\55\1\56\2\55\2\3\1\55\10\3"+
    "\1\u013d\16\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\10\55\1\56\2\55\2\3\1\55\11\3"+
    "\1\u013e\15\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\10\55\1\56\2\55\2\3\1\55\17\3"+
    "\1\u013f\7\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\10\55\1\56\2\55\2\3\1\55\1\3"+
    "\1\u0140\6\3\1\u0141\16\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\20\3\1\110\6\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\21\3\1\134\5\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\10\3\1\u0142\16\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\5\3\1\143\21\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\13\3\1\u0143\13\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\11\3\1\u0144\15\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\7\3\1\u0145\17\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\12\3\1\u0146\14\3\6\55\2\3\1\55\2\0"+
    "\1\53\13\55\1\102\7\55\1\56\45\55\3\0\2\55"+
    "\10\3\1\57\10\55\1\56\2\55\2\3\1\55\1\3"+
    "\1\u0147\25\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\10\55\1\56\2\55\2\3\1\55\17\3"+
    "\1\u0148\7\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\10\55\1\56\2\55\2\3\1\55\13\3"+
    "\1\u0149\13\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\10\55\1\56\2\55\2\3\1\55\1\3"+
    "\1\243\1\124\1\3\1\125\1\3\1\126\4\3\1\127"+
    "\6\3\1\130\1\131\3\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\2\3\1\u014a\24\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\3\3\1\u014b\23\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\1\3\1\u014c\25\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\153\11\55\1\56\2\55\2\153\1\55"+
    "\5\153\1\u014d\21\153\6\55\2\153\1\55\2\0\1\155"+
    "\23\55\1\56\6\55\1\u014e\36\55\3\0\23\55\1\56"+
    "\10\55\1\u014f\34\55\3\0\23\55\1\56\20\55\1\102"+
    "\6\55\1\u0150\15\55\3\0\23\55\1\56\7\55\1\u0151"+
    "\35\55\3\0\23\55\1\56\6\55\1\u0152\36\55\3\0"+
    "\23\55\1\56\10\55\1\u0153\34\55\3\0\23\55\1\56"+
    "\6\55\1\u0154\36\55\3\0\23\55\1\56\10\55\1\u012c"+
    "\34\55\3\0\23\55\1\56\12\55\1\340\32\55\3\0"+
    "\23\55\1\56\14\55\1\u0155\30\55\3\0\23\55\1\56"+
    "\7\55\1\u0156\35\55\3\0\23\55\1\56\11\55\1\u0157"+
    "\33\55\3\0\23\55\1\56\17\55\1\u0158\25\55\3\0"+
    "\23\55\1\56\20\55\1\344\24\55\3\0\23\55\1\56"+
    "\10\55\1\u0159\6\55\1\u0155\25\55\3\0\23\55\1\56"+
    "\7\55\1\u015a\35\55\3\0\23\55\1\56\15\55\1\u0115"+
    "\27\55\3\0\23\55\1\56\15\55\1\u015b\27\55\3\0"+
    "\23\55\1\56\7\55\1\u015c\35\55\3\0\23\55\1\56"+
    "\10\55\1\u015d\34\55\3\0\23\55\1\56\12\55\1\102"+
    "\32\55\3\0\23\55\1\56\10\55\1\u0154\34\55\3\0"+
    "\23\55\1\56\14\55\1\u015e\2\55\1\u015f\1\55\1\u0160"+
    "\3\55\1\u0161\1\222\16\55\3\0\23\55\1\56\7\55"+
    "\1\u012c\35\55\3\0\23\55\1\56\15\55\1\u0162\27\55"+
    "\3\0\23\55\1\56\24\55\1\u0163\20\55\3\0\23\55"+
    "\1\56\24\55\1\u0164\20\55\3\0\23\55\1\56\10\55"+
    "\1\u0151\34\55\3\0\23\55\1\56\10\55\1\u0119\34\55"+
    "\3\0\23\55\1\56\15\55\1\u0165\27\55\3\0\12\55"+
    "\1\u0166\10\55\1\56\45\55\3\0\23\55\1\56\7\55"+
    "\1\u0167\35\55\3\0\23\55\1\56\6\55\1\u0168\36\55"+
    "\3\0\23\55\1\56\7\55\1\314\35\55\3\0\10\55"+
    "\1\177\12\55\1\56\1\200\1\201\1\202\2\55\1\203"+
    "\1\204\1\205\1\206\1\207\1\210\1\55\1\211\1\u0169"+
    "\1\213\1\214\1\215\1\216\1\217\1\55\1\220\1\221"+
    "\1\222\1\55\1\223\1\224\13\55\3\0\23\55\1\56"+
    "\6\55\1\u016a\36\55\3\0\23\55\1\56\11\55\1\u016b"+
    "\33\55\3\0\23\55\1\56\7\55\1\344\35\55\3\0"+
    "\10\55\1\u016c\12\55\1\56\45\55\3\0\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\4\3\1\u016d"+
    "\22\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\3\3\1\142"+
    "\23\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\4\3\1\110"+
    "\22\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\3\3\1\u016e"+
    "\23\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\1\3\1\u016f"+
    "\25\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\1\3\1\u0106"+
    "\25\3\6\55\2\3\1\55\2\0\1\53\2\55\6\3"+
    "\1\275\1\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\27\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\13\3\1\u0170"+
    "\13\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\6\3\1\u0171"+
    "\20\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\20\3\1\u0172"+
    "\6\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\14\3\1\u0173"+
    "\12\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\13\3\1\u0174"+
    "\13\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\1\3\1\u0175"+
    "\25\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\4\3\1\267"+
    "\22\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\14\3\1\366"+
    "\12\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\13\3\1\110"+
    "\13\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\11\3\1\u0173"+
    "\15\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\1\u0172\1\3\1\55\27\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\10\55\1\56\2\55\2\3\1\55\11\3\1\142\15\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\10\55\1\56\2\55\2\3\1\55\2\3\1\363\24\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\10\55\1\56\2\55\2\3\1\55\10\3\1\u0176\16\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\6\3\1\6"+
    "\1\3\1\57\10\55\1\56\1\200\1\201\1\16\1\3"+
    "\1\55\1\20\1\233\1\u0177\1\23\1\24\1\234\1\3"+
    "\1\26\1\27\1\30\1\31\1\32\1\235\1\34\1\3"+
    "\1\35\1\36\1\37\1\3\1\236\1\41\2\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\10\55"+
    "\1\56\2\55\2\3\1\55\7\3\1\u0178\17\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\10\55"+
    "\1\56\2\55\2\3\1\55\2\3\1\110\24\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\153\11\55\1\56"+
    "\2\55\2\153\1\55\11\153\1\u0179\15\153\6\55\2\153"+
    "\1\55\2\0\1\155\23\55\1\56\23\55\1\102\21\55"+
    "\3\0\23\55\1\56\15\55\1\u017a\27\55\3\0\23\55"+
    "\1\56\6\55\1\u017b\36\55\3\0\23\55\1\56\14\55"+
    "\1\u017c\30\55\3\0\23\55\1\56\7\55\1\u017d\35\55"+
    "\3\0\23\55\1\56\16\55\1\u017e\26\55\3\0\23\55"+
    "\1\56\22\55\1\u012c\22\55\3\0\23\55\1\56\10\55"+
    "\1\102\34\55\3\0\23\55\1\56\6\55\1\u017f\36\55"+
    "\3\0\23\55\1\56\3\55\1\102\41\55\3\0\23\55"+
    "\1\56\17\55\1\102\25\55\3\0\23\55\1\56\14\55"+
    "\1\u0180\30\55\3\0\23\55\1\56\15\55\1\u0181\27\55"+
    "\3\0\23\55\1\56\16\55\1\u0182\26\55\3\0\23\55"+
    "\1\56\24\55\1\u0183\20\55\3\0\23\55\1\56\6\55"+
    "\1\u0184\6\55\1\u0185\27\55\3\0\23\55\1\56\25\55"+
    "\1\102\17\55\3\0\23\55\1\56\26\55\1\336\16\55"+
    "\3\0\23\55\1\56\15\55\1\u0186\27\55\3\0\23\55"+
    "\1\56\12\55\1\345\32\55\3\0\23\55\1\56\20\55"+
    "\1\u0187\24\55\3\0\23\55\1\56\16\55\1\u0188\26\55"+
    "\3\0\23\55\1\56\14\55\1\u0189\30\55\3\0\23\55"+
    "\1\56\17\55\1\u018a\25\55\3\0\23\55\1\56\6\55"+
    "\1\u018b\36\55\3\0\23\55\1\56\24\55\1\u018c\20\55"+
    "\3\0\23\55\1\56\6\55\1\u0119\1\326\1\55\1\327"+
    "\1\55\1\330\4\55\1\331\6\55\1\332\1\333\14\55"+
    "\3\0\23\55\1\56\7\55\1\u018d\35\55\3\0\23\55"+
    "\1\56\10\55\1\u018e\34\55\3\0\23\55\1\56\6\55"+
    "\1\u018f\36\55\3\0\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\3\3\1\u0190\23\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\10\55\1\56"+
    "\2\55\2\3\1\55\1\u0191\26\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\4\3\1\363\22\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\17\3\1\142\7\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\10\3\1\u0192\16\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\1\3\1\u0193\25\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\10\3\1\u0194\16\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\4\3\1\u0195\22\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\14\3\1\u0196\12\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\u0197\10\55\1\56\2\55"+
    "\2\3\1\55\27\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\10\55\1\56\2\55\2\3\1\55"+
    "\7\3\1\112\5\3\1\110\11\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\10\55\1\56\2\55"+
    "\2\3\1\55\5\3\1\u0144\21\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\153\11\55\1\56\2\55\2\153"+
    "\1\55\14\153\1\u0198\12\153\6\55\2\153\1\55\2\0"+
    "\1\155\23\55\1\56\11\55\1\u0199\33\55\3\0\23\55"+
    "\1\56\10\55\1\344\34\55\3\0\23\55\1\56\11\55"+
    "\1\102\33\55\3\0\23\55\1\56\10\55\1\u019a\34\55"+
    "\3\0\23\55\1\56\6\55\1\u019b\36\55\3\0\10\55"+
    "\1\u0133\12\55\1\56\45\55\3\0\23\55\1\56\20\55"+
    "\1\u019c\24\55\3\0\23\55\1\56\13\55\1\u019d\31\55"+
    "\3\0\23\55\1\56\25\55\1\u019e\17\55\3\0\23\55"+
    "\1\56\21\55\1\u019f\23\55\3\0\23\55\1\56\20\55"+
    "\1\u01a0\24\55\3\0\23\55\1\56\6\55\1\u01a1\36\55"+
    "\3\0\23\55\1\56\11\55\1\u012d\33\55\3\0\23\55"+
    "\1\56\21\55\1\u0158\23\55\3\0\23\55\1\56\20\55"+
    "\1\102\24\55\3\0\23\55\1\56\16\55\1\u019f\26\55"+
    "\3\0\23\55\1\56\2\55\1\u019e\42\55\3\0\23\55"+
    "\1\56\16\55\1\344\26\55\3\0\23\55\1\56\7\55"+
    "\1\u0155\35\55\3\0\10\55\1\177\12\55\1\56\1\200"+
    "\1\201\1\202\2\55\1\203\1\204\1\u01a2\1\206\1\207"+
    "\1\210\1\55\1\211\1\212\1\213\1\214\1\215\1\216"+
    "\1\217\1\55\1\220\1\221\1\222\1\55\1\223\1\224"+
    "\13\55\3\0\23\55\1\56\14\55\1\u01a3\30\55\3\0"+
    "\23\55\1\56\7\55\1\102\35\55\3\0\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\10\3\1\361"+
    "\16\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\4\3\1\u01a4"+
    "\22\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\13\3\1\u01a5"+
    "\13\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\4\3\1\142"+
    "\22\3\6\55\2\3\1\55\2\0\1\53\2\55\6\3"+
    "\1\6\1\3\1\57\10\55\1\56\1\200\1\201\1\16"+
    "\1\3\1\55\1\u01a6\1\233\1\22\1\23\1\24\1\234"+
    "\1\3\1\26\1\27\1\30\1\31\1\32\1\235\1\34"+
    "\1\3\1\35\1\36\1\37\1\3\1\236\1\41\2\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\10\55\1\56\2\55\2\3\1\55\10\3\1\u0196\16\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\10\55\1\56\2\55\2\3\1\55\5\3\1\374\21\3"+
    "\6\55\2\3\1\55\2\0\1\53\23\55\1\56\45\55"+
    "\3\0\1\u01a7\1\55\10\153\11\55\1\56\2\55\2\153"+
    "\1\55\12\153\1\u01a8\14\153\6\55\2\153\1\55\2\0"+
    "\1\155\23\55\1\56\10\55\1\u01a9\34\55\3\0\23\55"+
    "\1\56\5\55\1\u01aa\37\55\3\0\23\55\1\56\11\55"+
    "\1\u0155\33\55\3\0\23\55\1\56\24\55\1\344\20\55"+
    "\3\0\23\55\1\56\15\55\1\u01ab\27\55\3\0\23\55"+
    "\1\56\6\55\1\u01ac\36\55\3\0\23\55\1\56\15\55"+
    "\1\u01ad\27\55\3\0\23\55\1\56\11\55\1\u01ae\33\55"+
    "\3\0\23\55\1\56\21\55\1\u01af\23\55\3\0\23\55"+
    "\1\56\14\55\1\315\5\55\1\102\22\55\3\0\23\55"+
    "\1\56\12\55\1\u0188\32\55\3\0\2\55\10\3\1\57"+
    "\10\55\1\56\2\55\2\3\1\55\5\3\1\u01b0\21\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\10\55\1\56\2\55\2\3\1\55\3\3\1\366\23\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\10\55\1\56\2\55\2\3\1\55\1\105\4\3\1\u01b1"+
    "\21\3\6\55\2\3\1\55\2\0\1\53\2\55\1\u01b2"+
    "\2\55\2\u01b2\1\55\1\u01b2\12\55\1\56\2\55\2\u01b2"+
    "\1\55\27\u01b2\6\55\2\u01b2\1\55\2\0\1\u01b3\2\55"+
    "\10\153\11\55\1\56\2\55\2\153\1\55\10\153\1\u01b4"+
    "\16\153\6\55\2\153\1\55\2\0\1\155\23\55\1\56"+
    "\15\55\1\314\27\55\3\0\23\55\1\56\11\55\1\u01b5"+
    "\33\55\3\0\23\55\1\56\20\55\1\u01b6\24\55\3\0"+
    "\23\55\1\56\11\55\1\344\33\55\3\0\10\55\1\177"+
    "\12\55\1\56\1\200\1\201\1\202\2\55\1\u01b7\1\204"+
    "\1\205\1\206\1\207\1\210\1\55\1\211\1\212\1\213"+
    "\1\214\1\215\1\216\1\217\1\55\1\220\1\221\1\222"+
    "\1\55\1\223\1\224\13\55\3\0\23\55\1\56\15\55"+
    "\1\u01af\27\55\3\0\23\55\1\56\12\55\1\u015e\32\55"+
    "\3\0\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\6\3\1\u01b8\20\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\10\55\1\56\2\55\2\3"+
    "\1\55\13\3\1\u0193\13\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\u01b2\6\55\1\u01b9\2\55\1\56\2\55"+
    "\2\u01b2\1\55\27\u01b2\6\55\2\u01b2\1\55\2\0\1\u01b3"+
    "\1\55\1\0\10\u01b3\6\0\1\u01ba\5\0\2\u01b3\1\0"+
    "\27\u01b3\6\0\2\u01b3\3\0\1\u01b3\1\0\1\55\10\153"+
    "\11\55\1\56\2\55\2\153\1\55\3\153\1\u01bb\23\153"+
    "\6\55\2\153\1\55\2\0\1\155\23\55\1\56\12\55"+
    "\1\u01bc\32\55\3\0\23\55\1\56\10\55\1\u0158\34\55"+
    "\3\0\23\55\1\56\5\55\1\311\4\55\1\u01bd\32\55"+
    "\3\0\2\55\10\3\1\57\10\55\1\56\2\55\1\u01be"+
    "\1\3\1\55\27\3\6\55\2\3\1\55\2\0\1\53"+
    "\23\55\1\56\44\55\1\u01bf\3\0\1\55\67\0\1\u01c0"+
    "\4\0\1\55\10\153\2\55\1\u01c1\6\55\1\56\2\55"+
    "\2\153\1\55\27\153\6\55\2\153\1\55\2\0\1\155"+
    "\23\55\1\56\13\55\1\u01c2\31\55\3\0\23\55\1\56"+
    "\20\55\1\u01ac\24\55\3\0\2\55\10\3\1\57\10\55"+
    "\1\56\2\55\2\3\1\55\7\3\1\u01c3\17\3\6\55"+
    "\2\3\1\55\2\0\1\53\1\55\22\u01bf\1\u01c4\44\u01bf"+
    "\1\u01c5\3\0\1\u01bf\67\u01c0\1\u01c6\3\0\1\u01c0\1\55"+
    "\1\u01c7\2\55\2\u01c7\1\55\1\u01c7\12\55\1\56\2\55"+
    "\2\u01c7\1\55\27\u01c7\6\55\2\u01c7\1\55\2\0\1\u01c8"+
    "\23\55\1\56\2\55\1\u01c9\42\55\3\0\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\2\3\1\u01ca"+
    "\24\3\6\55\2\3\1\55\2\0\1\53\1\55\21\u01bf"+
    "\1\u01cb\1\u01c4\44\u01bf\1\u01c5\3\0\13\u01bf\1\u01cc\7\u01bf"+
    "\1\u01c4\44\u01bf\1\u01c5\3\0\1\u01bf\12\u01c0\1\u01cd\54\u01c0"+
    "\1\u01c6\3\0\1\u01c0\1\55\10\u01c7\3\55\1\u01ce\5\55"+
    "\1\56\2\55\2\u01c7\1\55\27\u01c7\6\55\2\u01c7\1\55"+
    "\2\0\1\u01c8\1\55\1\0\10\u01c8\3\0\1\u01cf\10\0"+
    "\2\u01c8\1\0\27\u01c8\6\0\2\u01c8\3\0\1\u01c8\1\0"+
    "\22\55\1\56\14\55\1\u01d0\30\55\3\0\2\55\10\3"+
    "\1\57\10\55\1\56\2\55\2\3\1\55\10\3\1\u01d1"+
    "\16\3\6\55\2\3\1\55\2\0\1\53\23\55\1\56"+
    "\7\55\1\u01d2\35\55\3\0\2\55\10\3\1\57\10\55"+
    "\1\56\2\55\2\3\1\55\11\3\1\266\15\3\6\55"+
    "\2\3\1\55\2\0\1\53\23\55\1\56\15\55\1\u01d3"+
    "\27\55\3\0\23\55\1\56\16\55\1\u012c\26\55\3\0"+
    "\1\55";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\53\1\2\0\3\1\5\0\2\1\1\11\2\1"+
    "\6\0\50\1\1\0\4\1\2\0\2\1\1\11\2\0"+
    "\7\1\30\0\60\1\46\0\43\1\42\0\1\1\4\0"+
    "\31\1\37\0\15\1\23\0\1\1\2\0\11\1\13\0"+
    "\3\1\1\0\1\1\4\0\1\1\2\0\2\1\2\0"+
    "\1\1\3\0\1\1\2\0\1\1\2\0\1\1\4\0"+
    "\1\1\6\0\5\1\1\11\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 17: break;
          case 2: 
            { lexeme=yytext(); return ID;
            }
          case 18: break;
          case 3: 
            { lexeme=yytext(); return INT;
            }
          case 19: break;
          case 4: 
            { lexeme=yytext(); return PUNTUACTION;
            }
          case 20: break;
          case 5: 
            { /*Ignore*/
            }
          case 21: break;
          case 6: 
            { lexeme=yytext(); return ARITMETIC_OPERATOR;
            }
          case 22: break;
          case 7: 
            { lexeme=yytext(); return LOGIC_OPERATOR;
            }
          case 23: break;
          case 8: 
            { lexeme=yytext(); return FUNCTION;
            }
          case 24: break;
          case 9: 
            { lexeme=yytext(); return FLOAT;
            }
          case 25: break;
          case 10: 
            { lexeme=yytext(); return COMMENT;
            }
          case 26: break;
          case 11: 
            { lexeme=yytext(); return RESERVED;
            }
          case 27: break;
          case 12: 
            { lexeme=yytext(); return VAR;
            }
          case 28: break;
          case 13: 
            { lexeme=yytext(); return STRING;
            }
          case 29: break;
          case 14: 
            { lexeme=yytext(); return BOOLEAN;
            }
          case 30: break;
          case 15: 
            { lexeme=yytext(); return CONSTANT;
            }
          case 31: break;
          case 16: 
            { lexeme=yytext(); return DB_ACCESS;
            }
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
