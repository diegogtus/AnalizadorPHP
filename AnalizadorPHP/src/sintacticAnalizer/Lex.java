/* The following code was generated by JFlex 1.6.1 */

/*IMPORTACIONES*/
package sintacticAnalizer;
import static sintacticAnalizer.Token.*;

//DEFINICIONES

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/diego/NetBeansProjects/AnalizadorPHP/AnalizadorPHP/src/sintacticAnalizer/Lexer.flex</tt>
 */
class Lex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\76\1\77\1\77\1\76\22\0\1\11\1\66\1\74"+
    "\1\0\1\101\1\65\1\67\1\75\1\33\1\34\1\13\1\64\1\0"+
    "\1\64\1\72\1\12\1\2\1\10\6\6\2\3\2\0\1\14\1\0"+
    "\1\20\1\15\1\0\1\55\1\54\2\5\1\73\1\53\2\1\1\52"+
    "\2\1\1\62\1\1\1\60\1\56\2\1\1\63\1\51\1\71\1\61"+
    "\2\1\1\4\2\1\4\0\1\21\1\0\1\22\1\7\1\25\1\37"+
    "\1\31\1\43\1\47\1\17\1\30\1\57\1\41\1\23\1\27\1\36"+
    "\1\26\1\16\1\50\1\32\1\35\1\24\1\42\1\45\1\44\1\46"+
    "\1\40\1\1\1\0\1\70\2\0\6\1\1\100\172\1\u1f28\0\1\77"+
    "\1\77\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\1\3\2\4\35\1\1\4"+
    "\1\5\4\1\1\6\2\1\27\7\1\2\1\10\6\0"+
    "\2\4\1\0\1\11\14\0\1\11\52\0\1\12\1\13"+
    "\6\7\1\11\7\7\1\11\32\7\2\2\2\10\1\0"+
    "\1\3\1\0\1\4\72\0\1\11\20\0\45\7\1\11"+
    "\6\7\2\0\1\4\46\0\1\14\1\0\1\15\37\7"+
    "\1\15\23\0\1\11\16\0\23\7\1\11\2\7\16\0"+
    "\13\7\4\0\1\11\3\0\4\7\1\11\2\7\3\0"+
    "\3\7\2\0\2\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[499];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\204\0\u018c"+
    "\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c"+
    "\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac"+
    "\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc"+
    "\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a\0\u09cc"+
    "\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b16\0\u0b58\0\u0b9a"+
    "\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa"+
    "\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba"+
    "\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca"+
    "\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da"+
    "\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea"+
    "\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa"+
    "\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a"+
    "\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a"+
    "\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u0420\0\u1da6\0\u1de8"+
    "\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8"+
    "\0\u203a\0\u0ad4\0\u207c\0\u20be\0\u2100\0\u0a0e\0\u0a50\0\u2142"+
    "\0\u2184\0\204\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310"+
    "\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520"+
    "\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730"+
    "\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u2940"+
    "\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50"+
    "\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u120c\0\u124e\0\u12d2\0\u1314"+
    "\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u014a\0\u0210\0\u0252"+
    "\0\u0294\0\u02d6\0\u2de4\0\u035a\0\u039c\0\u03de\0\u2e26\0\u0462"+
    "\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672"+
    "\0\u06b4\0\u2e68\0\u0738\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2"+
    "\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2"+
    "\0\u3204\0\u0318\0\u06f6\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e"+
    "\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e"+
    "\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea\0\u372c\0\u376e"+
    "\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u393c\0\u397e"+
    "\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\u0b16\0\u3b4c"+
    "\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c"+
    "\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\u3f6c"+
    "\0\u3fae\0\u3ff0\0\u4032\0\u4074\0\u40b6\0\u40f8\0\u413a\0\u417c"+
    "\0\u41be\0\u4200\0\u4242\0\u4284\0\u42c6\0\u4308\0\u434a\0\u438c"+
    "\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518\0\u455a\0\u459c"+
    "\0\u45de\0\u4620\0\u4662\0\u46a4\0\u46e6\0\u4728\0\u476a\0\u47ac"+
    "\0\u47ee\0\u4830\0\u4872\0\u48b4\0\u48f6\0\u4938\0\u497a\0\u49bc"+
    "\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06\0\u4b48\0\u4b8a\0\u4bcc"+
    "\0\u4c0e\0\u4c50\0\u4c92\0\u4cd4\0\u4d16\0\u4d58\0\u4d9a\0\u4ddc"+
    "\0\u4e1e\0\u4e60\0\u4ea2\0\u4ee4\0\u4f26\0\u4f68\0\u4faa\0\u4fec"+
    "\0\u502e\0\u5070\0\u50b2\0\u50f4\0\u5136\0\u5178\0\204\0\u51ba"+
    "\0\u51fc\0\u523e\0\u5280\0\u52c2\0\u5304\0\u5346\0\u5388\0\u53ca"+
    "\0\u540c\0\u544e\0\u5490\0\u54d2\0\u5514\0\u5556\0\u5598\0\u55da"+
    "\0\u561c\0\u565e\0\u56a0\0\u56e2\0\u5724\0\u5766\0\u57a8\0\u57ea"+
    "\0\u582c\0\u586e\0\u58b0\0\u58f2\0\u5934\0\u5976\0\u0b9a\0\u59b8"+
    "\0\u59fa\0\u5a3c\0\u5a7e\0\u5ac0\0\u5b02\0\u5b44\0\u5b86\0\u5bc8"+
    "\0\u5c0a\0\u5c4c\0\u5c8e\0\u5cd0\0\u5d12\0\u5d54\0\u5d96\0\u5dd8"+
    "\0\u5e1a\0\u5e5c\0\u5e9e\0\u5ee0\0\u5f22\0\u5f64\0\u5fa6\0\u5fe8"+
    "\0\u077a\0\u07bc\0\u602a\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948"+
    "\0\u606c\0\u60ae\0\u60f0\0\u6132\0\u6174\0\u61b6\0\u61f8\0\u623a"+
    "\0\u627c\0\u62be\0\u6300\0\u6342\0\u6384\0\u63c6\0\u6408\0\u644a"+
    "\0\u648c\0\u64ce\0\u6510\0\u6552\0\u6594\0\u65d6\0\u6618\0\u665a"+
    "\0\u669c\0\u66de\0\u6720\0\u6762\0\u67a4\0\u67e6\0\u6828\0\u686a"+
    "\0\u68ac\0\u68ee\0\u6930\0\u6972\0\u69b4\0\u69f6\0\u6a38\0\u6a7a"+
    "\0\u6abc\0\u6afe\0\u6b40\0\u6b82\0\u6bc4\0\u6c06\0\u6c48\0\u6c8a"+
    "\0\u6ccc\0\u6d0e\0\u6d50\0\u6d92\0\u6dd4\0\u6e16\0\u6e58\0\u6e9a"+
    "\0\u6edc\0\u6f1e\0\u6f60\0\u6fa2\0\u6fe4\0\u7026\0\u7068\0\u70aa"+
    "\0\u70ec\0\u712e\0\u7170\0\u71b2\0\u71f4\0\u7236\0\u7278\0\u72ba"+
    "\0\u72fc\0\u733e\0\u7380\0\u73c2\0\u7404\0\u7446\0\u7488\0\u74ca"+
    "\0\u750c\0\u754e\0\u7590";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[499];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\4\1\5\2\3\1\5\1\6\1\5\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\2\3\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\3\1\23\1\24\1\25"+
    "\2\3\1\26\1\27\1\30\1\31\1\3\1\32\1\33"+
    "\1\34\1\3\1\35\1\36\1\3\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\3\1\45\2\3\1\46\1\47"+
    "\1\11\1\50\1\51\1\52\1\53\1\54\1\3\1\55"+
    "\1\56\1\7\2\0\1\57\1\3\1\60\1\4\1\5"+
    "\2\60\1\5\1\61\1\5\1\7\1\10\1\11\1\12"+
    "\1\13\1\62\1\60\1\3\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\60\1\71\1\72\1\73\2\3\1\74"+
    "\1\75\1\76\1\77\1\60\1\100\1\101\1\102\1\60"+
    "\1\103\1\104\3\60\1\105\10\60\1\47\1\11\1\50"+
    "\1\51\1\52\1\106\1\54\1\60\1\55\1\56\1\7"+
    "\1\0\1\60\1\57\104\0\1\107\1\110\1\111\1\0"+
    "\1\107\1\112\1\107\20\0\1\113\14\0\1\111\15\0"+
    "\1\114\5\0\1\115\1\113\10\0\2\5\2\0\1\5"+
    "\1\0\1\5\20\0\1\113\32\0\1\114\5\0\1\115"+
    "\1\113\40\0\1\116\61\0\1\117\1\120\50\0\2\11"+
    "\26\0\2\11\50\0\2\11\31\0\1\121\104\0\1\122"+
    "\113\0\1\123\7\0\1\124\60\0\1\125\67\0\1\126"+
    "\22\0\1\127\2\0\1\122\1\130\73\0\1\131\70\0"+
    "\1\132\12\0\1\133\71\0\1\134\1\135\2\0\1\136"+
    "\105\0\1\137\76\0\1\140\5\0\1\141\1\142\4\0"+
    "\1\122\61\0\1\143\1\0\1\144\1\0\1\145\6\0"+
    "\1\146\6\0\1\147\1\150\64\0\1\151\74\0\1\152"+
    "\17\0\1\153\57\0\1\154\6\0\1\155\76\0\1\122"+
    "\1\0\1\156\1\157\100\0\1\160\106\0\1\161\1\141"+
    "\71\0\1\162\1\0\1\163\11\0\1\164\56\0\1\165"+
    "\110\0\1\166\76\0\1\167\2\0\1\170\77\0\1\171"+
    "\113\0\1\172\65\0\1\173\1\174\104\0\1\175\105\0"+
    "\1\176\56\0\1\177\153\0\1\200\51\0\1\201\52\0"+
    "\1\4\1\5\2\0\1\5\1\0\1\5\1\0\2\11"+
    "\50\0\2\11\4\0\1\202\31\0\1\203\3\0\1\204"+
    "\17\0\1\205\17\0\1\50\1\206\1\207\100\0\1\50"+
    "\102\0\1\50\43\0\1\210\51\0\2\115\2\0\1\115"+
    "\1\0\1\115\72\0\10\211\5\0\2\211\1\0\12\211"+
    "\2\0\27\211\5\0\1\211\1\0\1\211\2\212\2\0"+
    "\1\211\2\0\1\213\2\0\2\213\1\0\1\213\6\0"+
    "\2\213\1\0\12\213\2\0\27\213\5\0\1\213\1\0"+
    "\1\213\4\0\1\213\2\0\10\60\5\0\2\60\1\0"+
    "\12\60\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\11\60\1\214"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\11\60\1\215\2\0"+
    "\5\60\1\216\21\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\1\217\11\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\6\60\1\220\1\60\5\0\2\60\1\0\11\60"+
    "\1\221\2\0\1\222\1\223\25\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\7\60\1\224\2\60\2\0\27\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\1\60\1\225"+
    "\1\0\11\60\1\226\2\0\27\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\1\60\1\227\1\230\2\60\1\231\4\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\11\60\1\232\2\0\27\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\2\0\10\60\5\0"+
    "\2\60\1\0\6\60\1\233\3\60\2\0\1\234\1\235"+
    "\4\60\1\222\20\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\2\60\1\236"+
    "\1\60\1\237\1\60\1\240\3\60\2\0\1\60\1\241"+
    "\6\60\1\242\1\243\15\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\10\60\5\0\2\60\1\0\10\60"+
    "\1\244\1\60\2\0\27\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\10\60\5\0\2\60\1\0\3\60"+
    "\1\245\6\60\2\0\7\60\1\246\17\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\1\60\1\247\6\60\1\250\1\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\5\60\1\222\1\60\1\251\1\252"+
    "\1\60\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\7\60\1\253"+
    "\2\60\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\12\60\2\0"+
    "\1\254\1\234\25\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\5\60\1\255"+
    "\1\60\1\256\2\60\2\0\5\60\1\257\21\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\2\0\10\60\5\0"+
    "\1\60\1\260\1\0\12\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\5\60\1\70\4\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\2\60\1\261\2\60\1\262\4\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\1\60\1\263\10\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\11\60\1\264\2\0\27\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\3\0\1\107\1\110"+
    "\2\0\1\107\1\0\1\107\20\0\1\113\32\0\1\114"+
    "\5\0\1\115\1\113\10\0\2\110\2\0\1\110\1\0"+
    "\1\110\20\0\1\113\32\0\1\114\5\0\1\115\1\113"+
    "\10\0\2\265\1\0\4\265\11\0\1\265\2\0\1\265"+
    "\3\0\1\265\5\0\1\265\3\0\1\265\7\0\3\265"+
    "\15\0\1\265\10\0\1\266\5\0\1\266\73\0\2\267"+
    "\2\0\1\267\1\0\1\267\53\0\1\114\17\0\2\267"+
    "\2\0\1\267\1\0\1\267\73\0\2\270\2\0\1\270"+
    "\1\0\1\270\20\0\1\113\32\0\1\114\6\0\1\113"+
    "\37\0\1\271\50\0\12\272\2\117\50\272\2\117\10\272"+
    "\3\0\1\272\12\273\1\274\1\11\50\273\2\274\14\273"+
    "\16\0\1\275\72\0\1\276\4\0\1\277\1\300\1\301"+
    "\2\0\1\302\1\303\1\304\1\305\1\306\1\307\1\0"+
    "\1\310\1\311\1\312\2\0\1\313\1\314\1\315\1\316"+
    "\1\0\1\317\1\320\1\321\1\0\1\322\1\323\60\0"+
    "\1\324\1\0\1\325\60\0\1\326\111\0\1\327\117\0"+
    "\1\330\76\0\1\331\106\0\1\137\77\0\1\332\76\0"+
    "\1\333\71\0\1\334\15\0\1\122\64\0\1\335\1\336"+
    "\10\0\1\161\66\0\1\337\3\0\1\340\111\0\1\341"+
    "\52\0\1\276\4\0\1\277\1\300\1\301\2\0\1\302"+
    "\1\342\1\304\1\305\1\306\1\166\1\0\1\310\1\311"+
    "\1\312\2\0\1\313\1\314\1\315\1\316\1\0\1\317"+
    "\1\320\1\321\1\0\1\343\1\323\16\0\1\50\1\206"+
    "\1\207\27\0\1\344\120\0\1\345\70\0\1\346\1\347"+
    "\7\0\1\350\101\0\1\161\63\0\1\351\100\0\1\352"+
    "\122\0\1\353\64\0\1\354\103\0\1\355\3\0\1\332"+
    "\75\0\1\356\23\0\1\357\53\0\1\360\107\0\1\361"+
    "\100\0\1\362\116\0\1\122\66\0\1\363\75\0\1\364"+
    "\15\0\1\365\67\0\1\366\101\0\1\122\102\0\1\367"+
    "\105\0\1\370\101\0\1\371\73\0\1\372\77\0\1\373"+
    "\77\0\1\351\107\0\1\374\73\0\1\375\100\0\1\376"+
    "\104\0\1\377\101\0\1\u0100\105\0\1\u0101\126\0\1\u0102"+
    "\104\0\1\u0103\54\0\1\u0104\102\0\1\u0105\75\0\1\50"+
    "\75\0\1\204\115\0\1\u0106\40\0\10\211\1\u0107\4\0"+
    "\2\211\1\0\12\211\2\0\27\211\5\0\1\211\1\0"+
    "\1\211\2\212\1\u0107\1\0\1\211\2\0\10\213\5\0"+
    "\2\213\1\0\12\213\2\0\27\213\5\0\1\213\1\0"+
    "\1\213\4\0\1\213\2\0\10\60\5\0\2\60\1\0"+
    "\10\60\1\u0108\1\60\2\0\27\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\5\60\1\u0109\1\60\1\u010a\2\60\2\0\27\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\2\0\6\60\1\u010b"+
    "\1\60\5\0\2\60\1\0\12\60\2\0\27\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\2\0\10\60\5\0"+
    "\1\60\1\u010c\1\0\12\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\12\60\2\0\1\u010d\26\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\11\60\1\u010e\2\0\27\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\6\60\1\61\1\60\3\0\1\277"+
    "\1\300\1\62\1\60\1\0\1\63\1\u010f\1\65\1\66"+
    "\1\67\1\u0110\1\60\1\71\1\72\1\73\2\0\1\74"+
    "\1\75\1\76\1\77\1\60\1\100\1\101\1\102\1\60"+
    "\1\u0111\1\104\14\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\12\60\2\0"+
    "\2\60\1\232\24\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\12\60\2\0"+
    "\1\u0112\26\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\11\60\1\u0113\2\0"+
    "\27\60\5\0\1\60\1\0\1\60\4\0\1\60\2\0"+
    "\10\60\5\0\2\60\1\0\1\60\1\u0114\10\60\2\0"+
    "\3\60\1\222\23\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\2\60\1\u0115"+
    "\1\u0116\6\60\2\0\1\254\26\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\1\60\1\u0117\3\60\1\u0118\4\60\2\0\27\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\2\0\10\60\5\0"+
    "\2\60\1\0\12\60\2\0\1\60\1\u0119\25\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\2\0\6\60\1\61"+
    "\1\60\3\0\1\277\1\300\1\62\1\60\1\0\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\60\1\71\1\72"+
    "\1\73\2\0\1\74\1\75\1\76\1\77\1\60\1\100"+
    "\1\101\1\102\1\60\1\103\1\104\14\60\2\0\1\50"+
    "\1\206\1\207\1\60\1\0\1\60\4\0\1\60\2\0"+
    "\10\60\5\0\1\u011a\1\60\1\0\12\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\12\60\2\0\1\u011b\26\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\2\0\10\60\5\0"+
    "\2\60\1\0\3\60\1\u011c\1\u011d\5\60\2\0\1\u011e"+
    "\26\60\5\0\1\60\1\0\1\60\4\0\1\60\2\0"+
    "\10\60\5\0\2\60\1\0\12\60\2\0\1\254\26\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\1\60\1\u011f\1\0\12\60\2\0\27\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\2\0\10\60\5\0"+
    "\1\u0120\1\60\1\0\12\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\12\60\2\0\2\60\1\u0121\24\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\1\60\1\u0122\10\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\3\60\1\u0123\3\60\1\u0112\2\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\3\60\1\u0124\6\60\2\0\13\60"+
    "\1\u0125\13\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\1\60\1\u0126\10\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\7\60\1\u0127\2\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\6\60\1\u0128\3\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\12\60\2\0\7\60"+
    "\1\222\17\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\10\60\1\u0129\1\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\4\60\1\u012a\5\60"+
    "\2\0\6\60\1\u012b\20\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\10\60\5\0\2\60\1\0\10\60"+
    "\1\u012c\1\60\2\0\27\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\10\60\5\0\2\60\1\0\10\60"+
    "\1\222\1\60\2\0\27\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\10\60\5\0\2\60\1\0\11\60"+
    "\1\u012d\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\12\60\2\0"+
    "\1\60\1\u012e\25\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\12\60\2\0"+
    "\1\60\1\u012f\25\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\7\60\1\u0130"+
    "\2\60\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\5\60\1\u0131"+
    "\4\60\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\3\60\1\u011f"+
    "\6\60\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\2\60\1\u0132"+
    "\7\60\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\12\60\2\0"+
    "\5\60\1\u0133\21\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\23\0\1\u0134\57\0\76\272\3\0\1\272\13\273"+
    "\1\u0135\100\273\1\274\1\u0136\50\273\2\274\14\273\17\0"+
    "\1\u0137\71\0\1\126\22\0\1\127\2\0\1\122\1\u0138"+
    "\75\0\1\122\75\0\1\307\77\0\1\u0139\113\0\1\122"+
    "\6\0\1\u013a\57\0\1\u013b\100\0\1\u013c\103\0\1\u013d"+
    "\77\0\1\u013e\103\0\1\363\103\0\1\155\103\0\1\u013f"+
    "\74\0\1\u0140\103\0\1\u0141\111\0\1\u0142\102\0\1\161"+
    "\67\0\1\u0143\10\0\1\u013f\67\0\1\u0144\107\0\1\332"+
    "\101\0\1\u0145\73\0\1\u0146\102\0\1\u0147\103\0\1\122"+
    "\77\0\1\u013e\105\0\1\u0148\4\0\1\u0149\1\0\1\u014a"+
    "\3\0\1\u014b\1\321\60\0\1\363\107\0\1\u014c\112\0"+
    "\1\u014d\101\0\1\u014e\63\0\1\u013b\101\0\1\336\106\0"+
    "\1\u014f\103\0\1\u0150\71\0\1\u0151\100\0\1\u0152\102\0"+
    "\1\u0138\65\0\1\276\4\0\1\277\1\300\1\301\2\0"+
    "\1\302\1\303\1\304\1\305\1\306\1\307\1\0\1\310"+
    "\1\u0153\1\312\2\0\1\313\1\314\1\315\1\316\1\0"+
    "\1\317\1\320\1\321\1\0\1\322\1\323\54\0\1\u0154"+
    "\104\0\1\u0155\77\0\1\161\65\0\1\u0156\122\0\1\u0157"+
    "\102\0\1\u0158\105\0\1\u0106\66\0\1\u0159\102\0\1\u015a"+
    "\100\0\1\u015b\110\0\1\u015c\132\0\1\u015d\45\0\1\u015e"+
    "\112\0\1\50\73\0\1\u015f\51\0\10\60\5\0\2\60"+
    "\1\0\1\60\1\u0160\10\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\3\60\1\u0161\6\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\12\60\2\0\1\60\1\222\6\60\1\u0162\16\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\2\60\1\u0163\7\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\1\60\1\u0164\10\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\3\60\1\u0165\6\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\1\60\1\u0166\10\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\6\60"+
    "\1\220\1\60\5\0\2\60\1\0\11\60\1\221\2\0"+
    "\1\222\1\u0167\25\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\11\60\1\222"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\5\60\1\u0110\4\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\3\60\1\u0129\6\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\5\60\1\250\4\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\7\60\1\u0168\2\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\2\60\1\u0169\7\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\4\60\1\u016a\5\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\12\60\2\0\1\u016b"+
    "\26\60\5\0\1\60\1\0\1\60\4\0\1\60\2\0"+
    "\10\60\5\0\2\60\1\0\12\60\2\0\1\60\1\254"+
    "\25\60\5\0\1\60\1\0\1\60\4\0\1\60\2\0"+
    "\10\60\5\0\2\60\1\0\3\60\1\u016c\6\60\2\0"+
    "\1\u0168\26\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\2\60\1\u016d\7\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\10\60\1\u0112\1\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\10\60\1\u016e\1\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\2\60\1\u016f\7\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\3\60\1\u0170\6\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\5\60\1\222\4\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\3\60\1\u0166\6\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\7\60\1\u0171\2\60"+
    "\2\0\1\u0172\1\60\1\u0173\3\60\1\u0174\1\102\17\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\2\60\1\u0129\7\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\10\60\1\u0175\1\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\12\60\2\0\5\60\1\u0176\21\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\12\60\2\0\5\60\1\u0177\21\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\3\60\1\u0163\6\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\3\60\1\u0116\6\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\10\60\1\u0178\1\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\12\60\1\u0150\1\0\27\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\2\0\10\60\5\0"+
    "\2\60\1\0\2\60\1\u0179\7\60\2\0\27\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\2\0\10\60\5\0"+
    "\2\60\1\0\1\60\1\u017a\10\60\2\0\27\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\2\0\10\60\5\0"+
    "\2\60\1\0\2\60\1\u0167\7\60\2\0\27\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\2\0\6\60\1\61"+
    "\1\60\3\0\1\277\1\300\1\62\1\60\1\0\1\63"+
    "\1\u010f\1\65\1\66\1\67\1\u0110\1\60\1\71\1\u017b"+
    "\1\73\2\0\1\74\1\75\1\76\1\77\1\60\1\100"+
    "\1\101\1\102\1\60\1\u0111\1\104\14\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\1\60\1\u017c\10\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\4\60\1\u017d\5\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\2\60\1\254\7\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\6\60\1\u017e\1\60"+
    "\5\0\2\60\1\0\12\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\12\60\2\0\1\u0133\26\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\10\60\1\u017f\1\60\2\0\27\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\42\0\1\122\40\0\12\273\1\7"+
    "\1\u0135\100\273\1\11\1\u0136\50\273\2\274\14\273\16\0"+
    "\1\122\122\0\1\122\73\0\1\u0180\72\0\1\u0181\107\0"+
    "\1\u0182\74\0\1\u0183\110\0\1\u0184\107\0\1\363\65\0"+
    "\1\122\77\0\1\u0185\76\0\1\122\117\0\1\122\74\0"+
    "\1\u0186\102\0\1\u0187\102\0\1\u0188\111\0\1\u0189\61\0"+
    "\1\u018a\6\0\1\u018b\113\0\1\122\102\0\1\153\66\0"+
    "\1\u018c\76\0\1\162\111\0\1\u018d\75\0\1\u018e\77\0"+
    "\1\u018f\106\0\1\u0190\100\0\1\122\67\0\1\u0191\121\0"+
    "\1\u0192\61\0\1\336\1\143\1\0\1\144\1\0\1\145"+
    "\6\0\1\146\6\0\1\147\1\150\56\0\1\u0193\102\0"+
    "\1\u0194\77\0\1\u0195\115\0\1\u0196\112\0\1\u0197\56\0"+
    "\1\u015d\106\0\1\u0198\110\0\1\u015d\66\0\1\u0159\125\0"+
    "\1\u0199\1\u019a\1\u019b\1\u019c\1\u019d\1\u019e\1\0\1\u019f"+
    "\2\0\1\u01a0\60\0\1\u01a1\40\0\10\60\5\0\2\60"+
    "\1\0\12\60\2\0\4\60\1\222\22\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\10\60\1\u01a2\1\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\1\60\1\u01a3\10\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\7\60\1\u01a4\2\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\2\60\1\u01a5\7\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\11\60\1\u01a6\2\0\27\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\12\60\2\0\3\60\1\u0129\23\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\12\60\2\0\2\60\1\222\24\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\3\60\1\222\6\60\2\0\27\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\1\60\1\u01a7\10\60\2\0\27\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\1\60\1\222"+
    "\1\0\12\60\2\0\27\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\10\60\5\0\2\60\1\0\12\60"+
    "\2\0\1\222\26\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\7\60\1\u01a8"+
    "\2\60\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\10\60\1\u01a9"+
    "\1\60\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\11\60\1\u01aa"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\12\60\2\0\5\60"+
    "\1\u01ab\21\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\1\60\1\u01ac\6\60"+
    "\1\u01ad\1\60\2\0\27\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\10\60\5\0\2\60\1\0\12\60"+
    "\2\0\6\60\1\222\20\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\10\60\5\0\2\60\1\0\12\60"+
    "\2\0\7\60\1\246\17\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\10\60\5\0\2\60\1\0\10\60"+
    "\1\u01ae\1\60\2\0\27\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\10\60\5\0\2\60\1\0\5\60"+
    "\1\255\4\60\2\0\27\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\10\60\5\0\2\60\1\0\12\60"+
    "\2\0\1\60\1\u01af\25\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\10\60\5\0\2\60\1\0\11\60"+
    "\1\u01b0\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\7\60\1\u01b1"+
    "\2\60\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\12\60\2\0"+
    "\1\u01b2\26\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\1\60\1\u01b3\10\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\12\60\2\0\5\60"+
    "\1\u01b4\21\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\1\60\1\u0116\1\236"+
    "\1\60\1\237\1\60\1\240\3\60\2\0\1\60\1\241"+
    "\6\60\1\242\1\243\15\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\10\60\5\0\2\60\1\0\2\60"+
    "\1\u01b5\7\60\2\0\27\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\10\60\5\0\2\60\1\0\3\60"+
    "\1\u01b6\6\60\2\0\27\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\10\60\5\0\2\60\1\0\1\60"+
    "\1\u01b7\10\60\2\0\27\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\26\0\1\u01b8\100\0\1\161\102\0\1\122"+
    "\100\0\1\u01b9\77\0\1\u01ba\66\0\1\372\130\0\1\u01bb"+
    "\72\0\1\u01bc\115\0\1\u01bd\75\0\1\u01be\100\0\1\u01bf"+
    "\65\0\1\u01c0\104\0\1\364\113\0\1\u0142\100\0\1\122"+
    "\75\0\1\u01be\65\0\1\u01bd\115\0\1\161\72\0\1\u013f"+
    "\65\0\1\276\4\0\1\277\1\300\1\301\2\0\1\302"+
    "\1\303\1\u01c1\1\305\1\306\1\307\1\0\1\310\1\311"+
    "\1\312\2\0\1\313\1\314\1\315\1\316\1\0\1\317"+
    "\1\320\1\321\1\0\1\322\1\323\62\0\1\u01c2\74\0"+
    "\1\122\125\0\1\u015d\63\0\1\u01c3\72\0\1\u01c4\102\0"+
    "\1\174\110\0\1\u01c5\50\0\10\60\5\0\2\60\1\0"+
    "\4\60\1\u01c6\5\60\2\0\27\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\3\60\1\254\6\60\2\0\27\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\4\60\1\222\5\60\2\0\27\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\3\60\1\u01c7\6\60\2\0\27\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\1\60\1\u01c8\10\60\2\0\27\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\6\60\1\u0130\1\60\5\0"+
    "\2\60\1\0\12\60\2\0\27\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\12\60\2\0\1\60\1\u01c9\25\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\6\60\1\u01ca\3\60\2\0\27\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\12\60\2\0\6\60\1\u01cb\20\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\12\60\2\0\2\60\1\u01cc\24\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\12\60\2\0\1\60\1\u01cd\25\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\1\60\1\u01ce\10\60\2\0\27\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\4\60\1\u012a\5\60\2\0\27\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\12\60\2\0\2\60\1\u016b\24\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\12\60\2\0\1\60\1\222\25\60\5\0\1\60\1\0"+
    "\1\60\4\0\1\60\2\0\10\60\5\0\2\60\1\0"+
    "\11\60\1\u01cc\2\0\27\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\2\0\10\60\5\0\1\u01cb\1\60\1\0"+
    "\12\60\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\11\60\1\254"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\2\60\1\u0168\7\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\6\60\1\61\1\60\3\0\1\277\1\300\1\62"+
    "\1\60\1\0\1\63\1\u010f\1\u01cf\1\66\1\67\1\u0110"+
    "\1\60\1\71\1\72\1\73\2\0\1\74\1\75\1\76"+
    "\1\77\1\60\1\100\1\101\1\102\1\60\1\u0111\1\104"+
    "\14\60\5\0\1\60\1\0\1\60\4\0\1\60\2\0"+
    "\10\60\5\0\2\60\1\0\7\60\1\u01d0\2\60\2\0"+
    "\27\60\5\0\1\60\1\0\1\60\4\0\1\60\2\0"+
    "\10\60\5\0\2\60\1\0\2\60\1\222\7\60\2\0"+
    "\27\60\5\0\1\60\1\0\1\60\4\0\1\60\25\0"+
    "\1\u01d1\76\0\1\u01d2\105\0\1\u013f\116\0\1\161\70\0"+
    "\1\u01d3\72\0\1\u01d4\110\0\1\u01d5\75\0\1\u01d6\113\0"+
    "\1\u01d7\72\0\1\131\7\0\1\122\67\0\1\u018e\105\0"+
    "\1\u015d\105\0\1\u015d\70\0\1\u01d8\55\0\10\60\5\0"+
    "\2\60\1\0\3\60\1\u01d9\6\60\2\0\27\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\2\0\10\60\5\0"+
    "\2\60\1\0\1\u01da\11\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\4\60\1\u0168\5\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\12\60\2\0\5\60\1\254\21\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\10\60\1\u01db\1\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\1\60\1\u01dc\10\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\10\60\1\u01dd\1\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\4\60\1\u01de\5\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\12\60\2\0\2\60\1\u01df\24\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\2\0\10\60\5\0\2\60"+
    "\1\0\7\60\1\224\2\60\2\0\3\60\1\222\23\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\2\0\10\60"+
    "\5\0\2\60\1\0\5\60\1\u01b0\4\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\32\0\1\u0138"+
    "\75\0\1\u01e0\112\0\1\u01e1\70\0\1\161\63\0\1\276"+
    "\4\0\1\277\1\300\1\301\2\0\1\u01e2\1\303\1\304"+
    "\1\305\1\306\1\307\1\0\1\310\1\311\1\312\2\0"+
    "\1\313\1\314\1\315\1\316\1\0\1\317\1\320\1\321"+
    "\1\0\1\322\1\323\63\0\1\u01d7\76\0\1\u0148\104\0"+
    "\1\u015d\51\0\10\60\5\0\2\60\1\0\10\60\1\u0167"+
    "\1\60\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\4\60\1\u01e3"+
    "\5\60\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\12\60\2\0"+
    "\1\60\1\u01e4\25\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\10\60\5\0\2\60\1\0\4\60\1\254"+
    "\5\60\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\2\0\6\60\1\61\1\60\3\0\1\277\1\300"+
    "\1\62\1\60\1\0\1\u01e5\1\u010f\1\65\1\66\1\67"+
    "\1\u0110\1\60\1\71\1\72\1\73\2\0\1\74\1\75"+
    "\1\76\1\77\1\60\1\100\1\101\1\102\1\60\1\u0111"+
    "\1\104\14\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\10\60\1\u01df\1\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\5\60\1\u0171\4\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\27\0\1\u01e6\77\0\1\u0142\76\0\1\125\4\0\1\u01e7"+
    "\54\0\10\60\5\0\2\60\1\0\5\60\1\u01e8\4\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\3\60\1\u016b\6\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\2\0\10\60\5\0\2\60\1\0\1\217\4\60\1\u01e9"+
    "\4\60\2\0\27\60\5\0\1\60\1\0\1\60\4\0"+
    "\1\60\30\0\1\u01ea\110\0\1\u01d4\44\0\10\60\5\0"+
    "\2\60\1\0\6\60\1\u01eb\3\60\2\0\27\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\2\0\10\60\5\0"+
    "\2\60\1\0\12\60\2\0\1\60\1\u01dc\25\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\17\0\1\u01ec\64\0"+
    "\10\60\5\0\1\u01ed\1\60\1\0\12\60\2\0\27\60"+
    "\5\0\1\60\1\0\1\60\4\0\1\60\31\0\1\u01ee"+
    "\52\0\10\60\5\0\2\60\1\0\7\60\1\u01ef\2\60"+
    "\2\0\27\60\5\0\1\60\1\0\1\60\4\0\1\60"+
    "\24\0\1\u01f0\57\0\10\60\5\0\2\60\1\0\2\60"+
    "\1\u01f1\7\60\2\0\27\60\5\0\1\60\1\0\1\60"+
    "\4\0\1\60\32\0\1\u01f2\51\0\10\60\5\0\2\60"+
    "\1\0\10\60\1\u01f3\1\60\2\0\27\60\5\0\1\60"+
    "\1\0\1\60\4\0\1\60\33\0\1\363\50\0\10\60"+
    "\5\0\2\60\1\0\11\60\1\u0129\2\0\27\60\5\0"+
    "\1\60\1\0\1\60\4\0\1\60\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30162];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\101\1\6\0\2\1\1\0"+
    "\1\1\14\0\1\1\52\0\1\11\56\1\1\0\1\1"+
    "\1\0\1\1\72\0\1\1\20\0\54\1\2\0\1\1"+
    "\46\0\1\1\1\0\1\11\40\1\23\0\1\1\16\0"+
    "\26\1\16\0\13\1\4\0\1\1\3\0\7\1\3\0"+
    "\3\1\2\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[499];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 14: break;
          case 2: 
            { lexeme=yytext(); return INT;
            }
          case 15: break;
          case 3: 
            { /*Ignore*/
            }
          case 16: break;
          case 4: 
            { lexeme=yytext(); return ARITMETIC_OPERATOR;
            }
          case 17: break;
          case 5: 
            { lexeme=yytext(); return LOGIC_OPERATOR;
            }
          case 18: break;
          case 6: 
            { return DOUBLE_QUOTE;
            }
          case 19: break;
          case 7: 
            { lexeme=yytext(); return ID;
            }
          case 20: break;
          case 8: 
            { lexeme=yytext(); return FLOAT;
            }
          case 21: break;
          case 9: 
            { lexeme=yytext(); return RESERVED;
            }
          case 22: break;
          case 10: 
            { lexeme=yytext(); return STRING;
            }
          case 23: break;
          case 11: 
            { lexeme=yytext(); return VAR;
            }
          case 24: break;
          case 12: 
            { lexeme=yytext(); return TYPE;
            }
          case 25: break;
          case 13: 
            { lexeme=yytext(); return BOOLEAN;
            }
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
