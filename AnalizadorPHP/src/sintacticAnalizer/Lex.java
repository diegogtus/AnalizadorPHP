/* The following code was generated by JFlex 1.6.1 */

/*IMPORTACIONES*/
package sintacticAnalizer;
import static sintacticAnalizer.Token.*;

//DEFINICIONES

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/diego/Documents/NetBeansProjects/AnalizadorPHP/AnalizadorPHP/src/sintacticAnalizer/Lexer.flex</tt>
 */
class Lex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\66\1\67\1\67\1\66\22\0\1\3\1\63\1\72"+
    "\1\0\1\60\1\0\1\64\1\0\1\25\1\26\1\5\1\62\1\70"+
    "\1\57\1\0\1\4\12\2\1\0\1\71\1\6\1\61\1\12\1\7"+
    "\1\0\1\50\1\47\3\1\1\46\2\1\1\45\2\1\1\55\1\1"+
    "\1\53\1\51\2\1\1\56\1\44\1\1\1\54\5\1\4\0\1\13"+
    "\1\0\1\14\1\27\1\17\1\32\1\23\1\36\1\42\1\11\1\22"+
    "\1\52\1\34\1\15\1\21\1\31\1\20\1\10\1\43\1\24\1\30"+
    "\1\16\1\35\1\40\1\37\1\41\1\33\1\1\1\0\1\65\10\0"+
    "\1\67\u1fa2\0\1\67\1\67\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\34\2\1\7\1\10\1\11\1\12\1\13\2\1\1\14"+
    "\1\15\1\16\1\4\2\0\1\17\5\2\1\17\50\2"+
    "\1\20\1\21\1\22\31\0\42\2\1\17\14\2\47\0"+
    "\30\2\1\0\14\2\1\23\1\2\42\0\1\17\4\0"+
    "\23\2\1\17\6\2\36\0\16\2\23\0\1\17\2\0"+
    "\4\2\1\17\3\2\13\0\3\2\4\0\1\17\2\0"+
    "\2\2\3\0\1\2\2\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[427];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\354\0\73\0\u0127"+
    "\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\261\0\73\0\u0811"+
    "\0\261\0\73\0\u084c\0\u0887\0\73\0\73\0\73\0\u08c2"+
    "\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a"+
    "\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72"+
    "\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a"+
    "\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022"+
    "\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa"+
    "\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2"+
    "\0\u140d\0\73\0\73\0\73\0\u1448\0\u1483\0\u14be\0\u0127"+
    "\0\u0162\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b"+
    "\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833"+
    "\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b"+
    "\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3"+
    "\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb"+
    "\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93"+
    "\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b"+
    "\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343"+
    "\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b"+
    "\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3"+
    "\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb"+
    "\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3"+
    "\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b"+
    "\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53"+
    "\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b"+
    "\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203"+
    "\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db"+
    "\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3"+
    "\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b"+
    "\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963"+
    "\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b"+
    "\0\u3b76\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13"+
    "\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb"+
    "\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3"+
    "\0\u40fe\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260\0\u429b"+
    "\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438\0\u4473"+
    "\0\u44ae\0\u44e9\0\u4524\0\u455f\0\u459a\0\u45d5\0\u4610\0\u464b"+
    "\0\u4686\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823"+
    "\0\u485e\0\u4899\0\u48d4\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb"+
    "\0\u4a36\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3"+
    "\0\u4c0e\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab"+
    "\0\u4de6\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83"+
    "\0\u4fbe\0\u4ff9\0\u5034\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b"+
    "\0\u5196\0\u51d1\0\u520c\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333"+
    "\0\u536e\0\u53a9\0\u53e4\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b"+
    "\0\u5546\0\u5581\0\u55bc\0\u55f7\0\u5632\0\u566d\0\u56a8\0\u56e3"+
    "\0\u571e\0\u5759\0\u5794\0\u57cf\0\u580a\0\u5845\0\u5880\0\u58bb"+
    "\0\u58f6\0\u5931\0\u596c\0\u59a7\0\u59e2\0\u5a1d\0\u5a58\0\u5a93"+
    "\0\u5ace\0\u5b09\0\u5b44\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b"+
    "\0\u5ca6\0\u5ce1\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd\0\u5e08\0\u5e43"+
    "\0\u5e7e\0\u5eb9\0\u5ef4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[427];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\3\1\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\3\1\21\1\22\1\23\2\2\1\24\1\25"+
    "\1\26\1\27\1\30\1\3\1\31\1\32\1\33\1\3"+
    "\1\34\1\35\1\3\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\3\1\44\2\3\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\5\1\0\1\55\1\56"+
    "\1\57\74\0\2\3\5\0\2\3\1\0\12\3\2\0"+
    "\30\3\16\0\1\4\74\0\1\60\1\61\74\0\1\62"+
    "\75\0\1\63\61\0\2\3\5\0\2\3\1\0\11\3"+
    "\1\64\2\0\6\3\1\65\21\3\15\0\2\3\5\0"+
    "\2\3\1\0\1\66\11\3\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\11\3\1\67\2\0\1\70\1\71"+
    "\1\72\25\3\15\0\2\3\5\0\2\3\1\0\7\3"+
    "\1\73\2\3\2\0\30\3\15\0\2\3\5\0\1\3"+
    "\1\74\1\0\11\3\1\75\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\1\3\1\76\1\77\2\3\1\100"+
    "\4\3\2\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\11\3\1\71\2\0\30\3\15\0\2\3\5\0\2\3"+
    "\1\0\6\3\1\101\3\3\2\0\1\3\1\102\1\103"+
    "\4\3\1\71\20\3\15\0\2\3\5\0\2\3\1\0"+
    "\2\3\1\104\1\3\1\105\1\3\1\106\3\3\2\0"+
    "\2\3\1\107\6\3\1\110\1\111\15\3\15\0\2\3"+
    "\5\0\2\3\1\0\10\3\1\112\1\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\11\3\1\113\2\0"+
    "\30\3\15\0\2\3\5\0\2\3\1\0\3\3\1\114"+
    "\6\3\2\0\10\3\1\115\17\3\15\0\2\3\5\0"+
    "\2\3\1\0\1\3\1\116\6\3\1\117\1\3\2\0"+
    "\30\3\15\0\2\3\5\0\2\3\1\0\5\3\1\71"+
    "\1\3\1\120\1\121\1\3\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\7\3\1\122\2\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\12\3\2\0\1\3"+
    "\1\123\1\102\25\3\15\0\2\3\5\0\2\3\1\0"+
    "\5\3\1\124\1\3\1\125\2\3\2\0\6\3\1\126"+
    "\21\3\15\0\2\3\5\0\1\3\1\127\1\0\12\3"+
    "\2\0\30\3\15\0\2\3\5\0\2\3\1\0\5\3"+
    "\1\20\4\3\2\0\30\3\15\0\2\3\5\0\2\3"+
    "\1\0\2\3\1\130\2\3\1\131\4\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\3\3\1\132\6\3"+
    "\2\0\30\3\15\0\2\3\5\0\2\3\1\0\12\3"+
    "\2\0\2\3\1\133\25\3\15\0\2\3\5\0\2\3"+
    "\1\0\2\3\1\134\7\3\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\5\3\1\135\4\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\11\3\1\136\2\0"+
    "\30\3\15\0\2\3\5\0\2\3\1\0\12\3\2\0"+
    "\1\137\27\3\15\0\2\3\5\0\2\3\1\0\12\3"+
    "\2\0\25\3\1\140\2\3\15\0\2\3\5\0\2\3"+
    "\1\0\10\3\1\141\1\3\2\0\30\3\75\0\1\142"+
    "\75\0\1\143\73\0\1\144\5\0\66\60\2\0\3\60"+
    "\5\145\1\146\65\145\10\0\1\147\70\0\1\150\1\151"+
    "\1\152\2\0\1\153\1\154\1\155\1\156\1\157\1\160"+
    "\1\0\1\161\1\162\1\163\2\0\1\164\1\165\1\166"+
    "\1\167\1\170\1\0\1\171\1\172\1\173\1\0\1\174"+
    "\1\175\31\0\2\3\5\0\2\3\1\0\5\3\1\176"+
    "\1\3\1\177\2\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\12\3\2\0\1\200\27\3\15\0\2\3"+
    "\5\0\1\3\1\201\1\0\12\3\2\0\30\3\15\0"+
    "\2\3\5\0\2\3\1\0\11\3\1\202\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\12\3\2\0\1\3"+
    "\1\203\26\3\15\0\2\3\3\0\1\150\1\151\1\12"+
    "\1\3\1\0\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\3\1\21\1\22\1\23\2\0\1\24\1\25\1\26"+
    "\1\27\1\30\1\3\1\31\1\32\1\33\1\3\1\34"+
    "\1\35\14\3\15\0\2\3\5\0\2\3\1\0\12\3"+
    "\2\0\3\3\1\71\24\3\15\0\2\3\5\0\2\3"+
    "\1\0\12\3\2\0\1\3\1\204\26\3\15\0\2\3"+
    "\5\0\2\3\1\0\11\3\1\205\2\0\30\3\15\0"+
    "\2\3\5\0\2\3\1\0\1\3\1\206\10\3\2\0"+
    "\4\3\1\71\23\3\15\0\2\3\5\0\2\3\1\0"+
    "\2\3\1\207\1\210\6\3\2\0\1\3\1\123\26\3"+
    "\15\0\2\3\5\0\2\3\1\0\1\3\1\211\3\3"+
    "\1\212\4\3\2\0\30\3\15\0\2\3\5\0\2\3"+
    "\1\0\12\3\2\0\2\3\1\213\25\3\15\0\2\3"+
    "\5\0\1\214\1\3\1\0\12\3\2\0\30\3\15\0"+
    "\2\3\5\0\2\3\1\0\12\3\2\0\1\3\1\215"+
    "\26\3\15\0\2\3\5\0\2\3\1\0\3\3\1\216"+
    "\1\217\5\3\2\0\1\3\1\220\26\3\15\0\2\3"+
    "\5\0\2\3\1\0\12\3\2\0\1\3\1\123\26\3"+
    "\15\0\2\3\5\0\1\3\1\221\1\0\12\3\2\0"+
    "\30\3\15\0\2\3\5\0\1\222\1\3\1\0\12\3"+
    "\2\0\30\3\15\0\2\3\5\0\2\3\1\0\12\3"+
    "\2\0\3\3\1\223\24\3\15\0\2\3\5\0\2\3"+
    "\1\0\1\3\1\224\10\3\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\3\3\1\225\3\3\1\204\2\3"+
    "\2\0\30\3\15\0\2\3\5\0\2\3\1\0\3\3"+
    "\1\226\6\3\2\0\14\3\1\227\13\3\15\0\2\3"+
    "\5\0\2\3\1\0\10\3\1\230\1\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\1\3\1\231\10\3"+
    "\2\0\30\3\15\0\2\3\5\0\2\3\1\0\7\3"+
    "\1\232\2\3\2\0\30\3\15\0\2\3\5\0\2\3"+
    "\1\0\6\3\1\233\3\3\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\12\3\2\0\10\3\1\71\17\3"+
    "\15\0\2\3\5\0\2\3\1\0\10\3\1\234\1\3"+
    "\2\0\30\3\15\0\2\3\5\0\2\3\1\0\4\3"+
    "\1\235\5\3\2\0\7\3\1\236\20\3\15\0\2\3"+
    "\5\0\2\3\1\0\10\3\1\237\1\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\10\3\1\71\1\3"+
    "\2\0\30\3\15\0\2\3\5\0\2\3\1\0\11\3"+
    "\1\240\2\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\12\3\2\0\2\3\1\241\25\3\15\0\2\3\5\0"+
    "\2\3\1\0\12\3\2\0\2\3\1\242\25\3\15\0"+
    "\2\3\5\0\2\3\1\0\7\3\1\243\2\3\2\0"+
    "\30\3\15\0\2\3\5\0\2\3\1\0\5\3\1\244"+
    "\4\3\2\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\3\3\1\221\6\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\11\3\1\245\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\3\3\1\246\6\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\5\3\1\247\4\3"+
    "\2\0\30\3\15\0\2\3\5\0\2\3\1\0\5\3"+
    "\1\250\4\3\2\0\30\3\15\0\2\3\5\0\2\3"+
    "\1\0\11\3\1\251\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\12\3\2\0\23\3\1\252\4\3\15\0"+
    "\2\3\5\0\2\3\1\0\12\3\2\0\26\3\1\253"+
    "\1\3\15\0\2\3\5\0\2\3\1\0\12\3\2\0"+
    "\1\3\1\254\26\3\14\0\5\145\1\255\65\145\4\0"+
    "\1\5\1\146\76\0\1\256\105\0\1\257\10\0\1\260"+
    "\50\0\1\261\103\0\1\262\2\0\1\263\1\63\1\264"+
    "\63\0\1\265\61\0\1\266\12\0\1\267\62\0\1\270"+
    "\1\271\2\0\1\272\76\0\1\63\67\0\1\273\6\0"+
    "\1\274\1\275\4\0\1\63\51\0\1\276\1\0\1\277"+
    "\1\0\1\300\7\0\1\301\6\0\1\302\1\303\54\0"+
    "\1\304\73\0\1\305\64\0\1\306\20\0\1\307\47\0"+
    "\1\310\6\0\1\311\67\0\1\63\1\0\1\312\1\313"+
    "\71\0\1\314\100\0\1\315\1\274\61\0\1\316\1\0"+
    "\1\317\12\0\1\320\46\0\1\321\101\0\1\160\67\0"+
    "\1\322\2\0\1\323\53\0\2\3\5\0\2\3\1\0"+
    "\3\3\1\324\6\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\12\3\2\0\2\3\1\71\6\3\1\325"+
    "\16\3\15\0\2\3\5\0\2\3\1\0\2\3\1\326"+
    "\7\3\2\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\1\3\1\327\10\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\1\3\1\330\10\3\2\0\30\3\15\0"+
    "\2\3\5\0\2\3\1\0\3\3\1\331\6\3\2\0"+
    "\30\3\15\0\2\3\5\0\2\3\1\0\3\3\1\234"+
    "\6\3\2\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\5\3\1\117\4\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\7\3\1\332\2\3\2\0\30\3\15\0"+
    "\2\3\5\0\2\3\1\0\2\3\1\333\7\3\2\0"+
    "\30\3\15\0\2\3\5\0\2\3\1\0\4\3\1\334"+
    "\5\3\2\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\12\3\2\0\1\3\1\335\26\3\15\0\2\3\5\0"+
    "\2\3\1\0\12\3\2\0\2\3\1\123\25\3\15\0"+
    "\2\3\5\0\2\3\1\0\3\3\1\336\6\3\2\0"+
    "\1\3\1\332\26\3\15\0\2\3\5\0\2\3\1\0"+
    "\2\3\1\337\7\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\10\3\1\204\1\3\2\0\30\3\15\0"+
    "\2\3\5\0\2\3\1\0\10\3\1\340\1\3\2\0"+
    "\30\3\15\0\2\3\5\0\2\3\1\0\2\3\1\341"+
    "\7\3\2\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\3\3\1\342\6\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\5\3\1\71\4\3\2\0\30\3\15\0"+
    "\2\3\5\0\2\3\1\0\3\3\1\330\6\3\2\0"+
    "\30\3\15\0\2\3\5\0\2\3\1\0\7\3\1\343"+
    "\2\3\2\0\1\3\1\344\1\3\1\345\3\3\1\346"+
    "\1\33\17\3\15\0\2\3\5\0\2\3\1\0\2\3"+
    "\1\234\7\3\2\0\30\3\15\0\2\3\5\0\2\3"+
    "\1\0\10\3\1\347\1\3\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\12\3\2\0\6\3\1\350\21\3"+
    "\15\0\2\3\5\0\2\3\1\0\12\3\2\0\6\3"+
    "\1\351\21\3\15\0\2\3\5\0\2\3\1\0\1\3"+
    "\1\352\10\3\2\0\30\3\15\0\2\3\5\0\2\3"+
    "\1\0\3\3\1\326\6\3\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\3\3\1\210\6\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\10\3\1\353\1\3"+
    "\2\0\30\3\15\0\2\3\5\0\2\3\1\0\12\3"+
    "\1\354\1\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\2\3\1\355\7\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\1\3\1\356\10\3\2\0\30\3\15\0"+
    "\2\3\5\0\2\3\1\0\2\3\1\72\7\3\2\0"+
    "\30\3\15\0\2\3\3\0\1\150\1\151\1\12\1\3"+
    "\1\0\1\13\1\14\1\15\1\16\1\17\1\20\1\3"+
    "\1\21\1\357\1\23\2\0\1\24\1\25\1\26\1\27"+
    "\1\30\1\3\1\31\1\32\1\33\1\3\1\34\1\35"+
    "\14\3\15\0\2\3\5\0\2\3\1\0\1\3\1\360"+
    "\10\3\2\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\4\3\1\361\5\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\2\3\1\123\7\3\2\0\30\3\15\0"+
    "\2\3\5\0\2\3\1\0\12\3\2\0\1\362\27\3"+
    "\15\0\2\3\5\0\2\3\1\0\7\3\1\363\2\3"+
    "\2\0\30\3\15\0\2\3\5\0\2\3\1\0\10\3"+
    "\1\364\1\3\2\0\30\3\15\0\2\3\5\0\2\3"+
    "\1\0\1\3\1\365\10\3\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\2\3\1\366\7\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\1\3\1\367\10\3"+
    "\2\0\30\3\15\0\2\3\5\0\2\3\1\0\10\3"+
    "\1\370\1\3\2\0\30\3\15\0\2\3\5\0\2\3"+
    "\1\0\12\3\2\0\26\3\1\371\1\3\15\0\2\3"+
    "\5\0\2\3\1\0\5\3\1\372\4\3\2\0\30\3"+
    "\14\0\4\145\1\5\1\255\65\145\10\0\1\63\102\0"+
    "\1\373\1\0\1\374\77\0\1\375\54\0\1\376\105\0"+
    "\1\377\76\0\1\u0100\74\0\1\63\70\0\1\u0101\66\0"+
    "\1\u0102\62\0\1\u0103\16\0\1\63\54\0\1\u0104\1\u0105"+
    "\11\0\1\315\56\0\1\u0106\3\0\1\u0107\103\0\1\u0108"+
    "\51\0\1\u0109\112\0\1\u010a\60\0\1\u010b\1\u010c\10\0"+
    "\1\u010d\72\0\1\315\53\0\1\u010e\71\0\1\u010f\114\0"+
    "\1\u0110\54\0\1\u0111\74\0\1\u0112\3\0\1\u0101\66\0"+
    "\1\u0113\24\0\1\u0114\52\0\1\u0115\63\0\1\u0116\100\0"+
    "\1\u0117\71\0\1\u0118\110\0\1\63\56\0\1\u0119\66\0"+
    "\1\u011a\16\0\1\u011b\57\0\1\u011c\72\0\1\63\73\0"+
    "\1\u011d\77\0\1\u011e\72\0\1\u011f\63\0\1\u0120\70\0"+
    "\1\u0121\70\0\1\u010e\55\0\2\3\5\0\2\3\1\0"+
    "\10\3\1\u0122\1\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\1\3\1\u0123\10\3\2\0\30\3\15\0"+
    "\2\3\5\0\2\3\1\0\7\3\1\u0124\2\3\2\0"+
    "\30\3\15\0\2\3\5\0\2\3\1\0\2\3\1\u0125"+
    "\7\3\2\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\12\3\2\0\4\3\1\234\23\3\15\0\2\3\5\0"+
    "\2\3\1\0\11\3\1\u0126\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\3\3\1\71\6\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\1\3\1\u0127\10\3"+
    "\2\0\30\3\15\0\2\3\5\0\1\3\1\71\1\0"+
    "\12\3\2\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\12\3\2\0\1\3\1\71\26\3\15\0\2\3\5\0"+
    "\2\3\1\0\7\3\1\u0128\2\3\2\0\30\3\15\0"+
    "\2\3\5\0\2\3\1\0\10\3\1\u0129\1\3\2\0"+
    "\30\3\15\0\2\3\5\0\2\3\1\0\11\3\1\u012a"+
    "\2\0\30\3\15\0\2\3\5\0\2\3\1\0\12\3"+
    "\2\0\6\3\1\u012b\21\3\15\0\2\3\5\0\2\3"+
    "\1\0\1\3\1\u012c\6\3\1\u012d\1\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\12\3\2\0\7\3"+
    "\1\71\20\3\15\0\2\3\5\0\2\3\1\0\12\3"+
    "\2\0\10\3\1\115\17\3\15\0\2\3\5\0\2\3"+
    "\1\0\10\3\1\u012e\1\3\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\5\3\1\124\4\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\12\3\2\0\2\3"+
    "\1\u012f\25\3\15\0\2\3\5\0\2\3\1\0\11\3"+
    "\1\u0130\2\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\7\3\1\u0131\2\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\12\3\2\0\5\3\1\71\22\3\15\0"+
    "\2\3\5\0\2\3\1\0\12\3\2\0\1\3\1\u0132"+
    "\26\3\42\0\1\63\45\0\2\3\5\0\2\3\1\0"+
    "\1\3\1\u0133\10\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\12\3\2\0\6\3\1\u0134\21\3\15\0"+
    "\2\3\5\0\2\3\1\0\1\3\1\210\1\104\1\3"+
    "\1\105\1\3\1\106\3\3\2\0\2\3\1\107\6\3"+
    "\1\110\1\111\15\3\15\0\2\3\5\0\2\3\1\0"+
    "\2\3\1\u0135\7\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\3\3\1\u0136\6\3\2\0\30\3\15\0"+
    "\2\3\5\0\2\3\1\0\1\3\1\u0137\10\3\2\0"+
    "\30\3\15\0\2\3\5\0\2\3\1\0\12\3\2\0"+
    "\2\3\1\u0138\25\3\15\0\2\3\5\0\2\3\1\0"+
    "\12\3\2\0\13\3\1\u0139\14\3\15\0\2\3\5\0"+
    "\2\3\1\0\3\3\1\371\6\3\2\0\30\3\15\0"+
    "\2\3\5\0\2\3\1\0\10\3\1\u013a\1\3\2\0"+
    "\30\3\15\0\2\3\5\0\2\3\1\0\12\3\2\0"+
    "\4\3\1\371\23\3\15\0\2\3\5\0\2\3\1\0"+
    "\4\3\1\365\5\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\12\3\2\0\15\3\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\3\1\44\2\3\1\45\15\0"+
    "\2\3\5\0\2\3\1\0\12\3\2\0\6\3\1\u013b"+
    "\21\3\32\0\1\u013c\105\0\1\63\6\0\1\u013d\47\0"+
    "\1\u013e\71\0\1\u013f\72\0\1\u0140\74\0\1\u0141\72\0"+
    "\1\u0119\74\0\1\311\74\0\1\u0142\65\0\1\u0143\74\0"+
    "\1\u0144\103\0\1\u0145\73\0\1\315\57\0\1\u0146\11\0"+
    "\1\u0142\57\0\1\u0147\100\0\1\u0101\72\0\1\u0148\64\0"+
    "\1\u0149\73\0\1\u014a\74\0\1\63\70\0\1\u0140\76\0"+
    "\1\u014b\5\0\1\u014c\1\0\1\u014d\3\0\1\u014e\1\173"+
    "\50\0\1\u0119\100\0\1\u014f\104\0\1\u0150\72\0\1\u0151"+
    "\51\0\1\u0152\74\0\1\u013e\72\0\1\u0105\77\0\1\u0153"+
    "\74\0\1\354\62\0\1\u0154\71\0\1\u0155\73\0\1\264"+
    "\63\0\1\150\1\151\1\152\2\0\1\153\1\154\1\155"+
    "\1\156\1\157\1\160\1\0\1\161\1\u0156\1\163\2\0"+
    "\1\164\1\165\1\166\1\167\1\170\1\0\1\171\1\172"+
    "\1\173\1\0\1\174\1\175\44\0\1\u0157\75\0\1\u0158"+
    "\70\0\1\315\104\0\1\u0159\44\0\2\3\5\0\2\3"+
    "\1\0\4\3\1\u015a\5\3\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\3\3\1\123\6\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\4\3\1\71\5\3"+
    "\2\0\30\3\15\0\2\3\5\0\2\3\1\0\3\3"+
    "\1\u015b\6\3\2\0\30\3\15\0\2\3\5\0\2\3"+
    "\1\0\1\3\1\u015c\10\3\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\12\3\2\0\1\243\27\3\15\0"+
    "\2\3\5\0\2\3\1\0\12\3\2\0\2\3\1\u015d"+
    "\25\3\15\0\2\3\5\0\2\3\1\0\6\3\1\u015e"+
    "\3\3\2\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\12\3\2\0\7\3\1\u015f\20\3\15\0\2\3\5\0"+
    "\2\3\1\0\12\3\2\0\3\3\1\u0160\24\3\15\0"+
    "\2\3\5\0\2\3\1\0\12\3\2\0\2\3\1\u0161"+
    "\25\3\15\0\2\3\5\0\2\3\1\0\1\3\1\u0162"+
    "\10\3\2\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\4\3\1\235\5\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\12\3\2\0\3\3\1\335\24\3\15\0"+
    "\2\3\5\0\2\3\1\0\12\3\2\0\2\3\1\71"+
    "\25\3\15\0\2\3\5\0\2\3\1\0\11\3\1\u0160"+
    "\2\0\30\3\15\0\2\3\5\0\1\u015f\1\3\1\0"+
    "\12\3\2\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\11\3\1\123\2\0\30\3\15\0\2\3\5\0\2\3"+
    "\1\0\2\3\1\332\7\3\2\0\30\3\15\0\2\3"+
    "\3\0\1\150\1\151\1\12\1\3\1\0\1\13\1\14"+
    "\1\u0163\1\16\1\17\1\20\1\3\1\21\1\22\1\23"+
    "\2\0\1\24\1\25\1\26\1\27\1\30\1\3\1\31"+
    "\1\32\1\33\1\3\1\34\1\35\14\3\15\0\2\3"+
    "\5\0\2\3\1\0\7\3\1\u0164\2\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\2\3\1\71\7\3"+
    "\2\0\30\3\15\0\2\3\5\0\2\3\1\0\12\3"+
    "\2\0\13\3\1\371\14\3\15\0\2\3\5\0\2\3"+
    "\1\0\10\3\1\u0165\1\3\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\1\3\1\u0166\10\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\11\3\1\u0167\2\0"+
    "\30\3\37\0\1\u0168\63\0\1\u0169\100\0\1\u016a\65\0"+
    "\1\u016b\110\0\1\u0119\63\0\1\u016c\64\0\1\63\70\0"+
    "\1\u016d\67\0\1\63\111\0\1\63\64\0\1\u016e\73\0"+
    "\1\u016f\73\0\1\u0170\103\0\1\u0171\51\0\1\u0172\6\0"+
    "\1\u0173\105\0\1\63\73\0\1\307\56\0\1\u0174\67\0"+
    "\1\316\103\0\1\u0175\65\0\1\u0176\70\0\1\u0177\104\0"+
    "\1\63\66\0\1\u0178\56\0\1\u0179\113\0\1\u017a\51\0"+
    "\1\u0105\1\276\1\0\1\277\1\0\1\300\7\0\1\301"+
    "\6\0\1\302\1\303\46\0\1\u017b\73\0\1\u017c\70\0"+
    "\1\u017d\57\0\2\3\5\0\2\3\1\0\3\3\1\u017e"+
    "\6\3\2\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\1\u017f\11\3\2\0\30\3\15\0\2\3\5\0\2\3"+
    "\1\0\4\3\1\332\5\3\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\12\3\2\0\6\3\1\123\21\3"+
    "\15\0\2\3\5\0\2\3\1\0\10\3\1\u0180\1\3"+
    "\2\0\30\3\15\0\2\3\5\0\2\3\1\0\1\3"+
    "\1\u0181\10\3\2\0\30\3\15\0\2\3\5\0\2\3"+
    "\1\0\10\3\1\u0182\1\3\2\0\30\3\15\0\2\3"+
    "\5\0\2\3\1\0\4\3\1\u0183\5\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\12\3\2\0\3\3"+
    "\1\u0184\24\3\15\0\2\3\5\0\2\3\1\0\7\3"+
    "\1\73\2\3\2\0\4\3\1\71\23\3\15\0\2\3"+
    "\5\0\2\3\1\0\5\3\1\u0130\4\3\2\0\30\3"+
    "\15\0\2\3\5\0\2\3\1\0\11\3\1\371\2\0"+
    "\30\3\15\0\2\3\5\0\2\3\1\0\12\3\2\0"+
    "\2\3\1\371\25\3\15\0\2\3\5\0\2\3\1\0"+
    "\4\3\1\u0185\5\3\2\0\30\3\33\0\1\u0186\71\0"+
    "\1\315\73\0\1\63\71\0\1\u0187\70\0\1\u0188\105\0"+
    "\1\u0120\74\0\1\u0189\62\0\1\u018a\107\0\1\u018b\66\0"+
    "\1\u018c\71\0\1\u018d\55\0\1\u018e\75\0\1\u011a\105\0"+
    "\1\u0145\71\0\1\63\65\0\1\u018c\56\0\1\u018b\106\0"+
    "\1\315\63\0\1\u0142\63\0\1\150\1\151\1\152\2\0"+
    "\1\153\1\154\1\u018f\1\156\1\157\1\160\1\0\1\161"+
    "\1\162\1\163\2\0\1\164\1\165\1\166\1\167\1\170"+
    "\1\0\1\171\1\172\1\173\1\0\1\174\1\175\52\0"+
    "\1\u0190\65\0\1\63\56\0\2\3\5\0\2\3\1\0"+
    "\10\3\1\72\1\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\4\3\1\u0191\5\3\2\0\30\3\15\0"+
    "\2\3\5\0\2\3\1\0\12\3\2\0\2\3\1\u0192"+
    "\25\3\15\0\2\3\5\0\2\3\1\0\4\3\1\123"+
    "\5\3\2\0\30\3\15\0\2\3\3\0\1\150\1\151"+
    "\1\12\1\3\1\0\1\u0193\1\14\1\15\1\16\1\17"+
    "\1\20\1\3\1\21\1\22\1\23\2\0\1\24\1\25"+
    "\1\26\1\27\1\30\1\3\1\31\1\32\1\33\1\3"+
    "\1\34\1\35\14\3\15\0\2\3\5\0\2\3\1\0"+
    "\10\3\1\u0184\1\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\5\3\1\343\4\3\2\0\30\3\15\0"+
    "\2\3\5\0\2\3\1\0\10\3\1\371\1\3\2\0"+
    "\30\3\32\0\1\u0194\67\0\1\u0195\76\0\1\u0142\110\0"+
    "\1\315\60\0\1\u0196\63\0\1\u0197\101\0\1\u0198\66\0"+
    "\1\u0199\105\0\1\u019a\62\0\1\265\10\0\1\63\57\0"+
    "\1\u0176\53\0\2\3\5\0\2\3\1\0\5\3\1\u019b"+
    "\4\3\2\0\30\3\15\0\2\3\5\0\2\3\1\0"+
    "\3\3\1\335\6\3\2\0\30\3\15\0\2\3\5\0"+
    "\2\3\1\0\1\66\4\3\1\u019c\4\3\2\0\30\3"+
    "\37\0\1\264\66\0\1\u019d\104\0\1\u019e\60\0\1\315"+
    "\61\0\1\150\1\151\1\152\2\0\1\u019f\1\154\1\155"+
    "\1\156\1\157\1\160\1\0\1\161\1\162\1\163\2\0"+
    "\1\164\1\165\1\166\1\167\1\170\1\0\1\171\1\172"+
    "\1\173\1\0\1\174\1\175\53\0\1\u019a\67\0\1\u014b"+
    "\53\0\2\3\5\0\2\3\1\0\6\3\1\u01a0\3\3"+
    "\2\0\30\3\15\0\2\3\5\0\2\3\1\0\12\3"+
    "\2\0\2\3\1\u0181\25\3\34\0\1\u01a1\70\0\1\u0145"+
    "\67\0\1\261\4\0\1\u01a2\53\0\2\3\5\0\1\u01a3"+
    "\1\3\1\0\12\3\2\0\30\3\35\0\1\u01a4\102\0"+
    "\1\u0197\42\0\2\3\5\0\2\3\1\0\7\3\1\u01a5"+
    "\2\3\2\0\30\3\24\0\1\u01a6\63\0\2\3\5\0"+
    "\2\3\1\0\2\3\1\u01a7\7\3\2\0\30\3\36\0"+
    "\1\u01a8\51\0\2\3\5\0\2\3\1\0\10\3\1\u01a9"+
    "\1\3\2\0\30\3\31\0\1\u01aa\56\0\2\3\5\0"+
    "\2\3\1\0\11\3\1\234\2\0\30\3\37\0\1\u01ab"+
    "\73\0\1\u0119\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24367];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\37\1\1\11"+
    "\2\1\1\11\2\1\3\11\1\1\2\0\57\1\3\11"+
    "\31\0\57\1\47\0\30\1\1\0\16\1\42\0\1\1"+
    "\4\0\32\1\36\0\16\1\23\0\1\1\2\0\10\1"+
    "\13\0\3\1\4\0\1\1\2\0\2\1\3\0\1\1"+
    "\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[427];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 20: break;
          case 2: 
            { lexeme=yytext(); return ID;
            }
          case 21: break;
          case 3: 
            { lexeme=yytext(); return INT;
            }
          case 22: break;
          case 4: 
            { /*Ignore*/
            }
          case 23: break;
          case 5: 
            { return DIVIDED;
            }
          case 24: break;
          case 6: 
            { return MULTIPLE;
            }
          case 25: break;
          case 7: 
            { return MINUS;
            }
          case 26: break;
          case 8: 
            { return VAR;
            }
          case 27: break;
          case 9: 
            { return ASSIGN;
            }
          case 28: break;
          case 10: 
            { return PLUS;
            }
          case 29: break;
          case 11: 
            { return NOT;
            }
          case 30: break;
          case 12: 
            { return COMMA;
            }
          case 31: break;
          case 13: 
            { return SEMICOLON;
            }
          case 32: break;
          case 14: 
            { return DOUBLE_QUOTE;
            }
          case 33: break;
          case 15: 
            { lexeme=yytext(); return RESERVED;
            }
          case 34: break;
          case 16: 
            { return EQUALS;
            }
          case 35: break;
          case 17: 
            { return AND;
            }
          case 36: break;
          case 18: 
            { return OR;
            }
          case 37: break;
          case 19: 
            { lexeme=yytext(); return TYPE;
            }
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
