/* The following code was generated by JFlex 1.6.1 */

/*IMPORTACIONES*/
package sintacticAnalizer;
import static sintacticAnalizer.Token.*;

//DEFINICIONES

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/diego/NetBeansProjects/AnalizadorPHP/AnalizadorPHP/src/sintacticAnalizer/Lexer.flex</tt>
 */
class Lex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\16\1\66\1\67\1\67\1\66\22\0\1\16\1\57\1\65"+
    "\1\0\1\62\1\56\1\60\1\71\1\11\1\12\1\20\1\55\1\15"+
    "\1\55\1\14\1\17\1\2\1\10\6\6\2\3\1\0\1\13\1\21"+
    "\1\57\1\25\1\22\1\0\1\5\1\5\1\5\1\5\1\63\1\54"+
    "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1"+
    "\1\1\1\1\1\1\1\64\1\1\1\1\1\1\1\4\2\1\1\13"+
    "\1\0\1\13\1\0\1\26\1\0\1\27\1\7\1\32\1\42\1\36"+
    "\1\46\1\52\1\24\1\35\1\1\1\44\1\30\1\34\1\41\1\33"+
    "\1\23\1\53\1\37\1\40\1\31\1\45\1\50\1\47\1\51\1\43"+
    "\1\1\1\13\1\61\1\13\1\0\6\1\1\70\172\1\u1f28\0\1\67"+
    "\1\67\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\2\2\4\1\5\2\6"+
    "\1\7\1\1\1\2\1\7\23\2\2\6\3\1\1\2"+
    "\1\1\1\5\1\2\1\1\2\0\1\10\1\3\1\11"+
    "\5\0\1\2\2\4\1\12\1\6\6\0\1\13\5\2"+
    "\1\13\7\2\1\13\31\2\1\0\2\14\1\2\2\0"+
    "\1\15\1\4\1\10\2\0\1\15\1\12\2\3\2\11"+
    "\1\2\30\0\45\2\1\13\6\2\2\12\1\2\46\0"+
    "\31\2\1\10\7\2\1\16\42\0\1\13\4\0\25\2"+
    "\1\13\2\2\37\0\14\2\23\0\1\13\2\0\4\2"+
    "\1\13\2\2\1\10\13\0\3\2\5\0\1\13\2\0"+
    "\2\2\5\0\1\2\4\0\1\2\3\0\1\2\4\0"+
    "\1\2\1\12\2\17\1\0\1\2\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[453];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706"+
    "\0\u0740\0\u077a\0\u07b4\0\72\0\u07ee\0\u0828\0\u0862\0\u089c"+
    "\0\u08d6\0\u0910\0\u094a\0\u0984\0\72\0\u09be\0\72\0\u09f8"+
    "\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\72"+
    "\0\u0bc8\0\u0c02\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u07ee"+
    "\0\u0828\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80"+
    "\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050"+
    "\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220"+
    "\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0"+
    "\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0"+
    "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u08d6\0\u171c\0\u08d6"+
    "\0\u1756\0\u0bc8\0\u0984\0\u1790\0\u0984\0\72\0\u0a6c\0\u0aa6"+
    "\0\u0ae0\0\u0b54\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u02b8"+
    "\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82"+
    "\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52"+
    "\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22"+
    "\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2"+
    "\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2"+
    "\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392"+
    "\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562"+
    "\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u08d6"+
    "\0\u0984\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e"+
    "\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e"+
    "\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e"+
    "\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe"+
    "\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce"+
    "\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e"+
    "\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334\0\u336e"+
    "\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504\0\u353e"+
    "\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4\0\u370e"+
    "\0\u3748\0\164\0\u3782\0\u37bc\0\u37f6\0\u3830\0\u386a\0\u38a4"+
    "\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6\0\u3a00\0\u3a3a\0\u3a74"+
    "\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44"+
    "\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14"+
    "\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\u3fe4"+
    "\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106\0\u4140\0\u417a\0\u41b4"+
    "\0\u41ee\0\u4228\0\u4262\0\u429c\0\u42d6\0\u4310\0\u434a\0\u4384"+
    "\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0\0\u451a\0\u4554"+
    "\0\u458e\0\u45c8\0\u4602\0\u463c\0\u4676\0\u46b0\0\u46ea\0\u4724"+
    "\0\u475e\0\u4798\0\u47d2\0\u480c\0\u4846\0\u4880\0\u48ba\0\u48f4"+
    "\0\u492e\0\u4968\0\u49a2\0\u49dc\0\u4a16\0\u4a50\0\u4a8a\0\u4ac4"+
    "\0\u4afe\0\u35b2\0\u4b38\0\u4b72\0\u4bac\0\u4be6\0\u4c20\0\u4c5a"+
    "\0\u4c94\0\u4cce\0\u4d08\0\u4d42\0\u4d7c\0\u4db6\0\u4df0\0\u4e2a"+
    "\0\u4e64\0\u4e9e\0\u4ed8\0\u4f12\0\u4f4c\0\u4f86\0\u4fc0\0\u4ffa"+
    "\0\u5034\0\u506e\0\u50a8\0\u50e2\0\u511c\0\u5156\0\u5190\0\u51ca"+
    "\0\u5204\0\u523e\0\u5278\0\u52b2\0\u52ec\0\u5326\0\u5360\0\u539a"+
    "\0\u53d4\0\u540e\0\u5448\0\u5482\0\u54bc\0\u54f6\0\u5530\0\u556a"+
    "\0\u55a4\0\u55de\0\u5618\0\u5652\0\u568c\0\u56c6\0\u5700\0\u573a"+
    "\0\u5774\0\u57ae\0\u57e8\0\u5822\0\u585c\0\u5896\0\u58d0\0\u590a"+
    "\0\u5944\0\u597e\0\u59b8\0\u59f2\0\u5a2c\0\u5a66\0\u5aa0\0\u5ada"+
    "\0\u5b14\0\u5b4e\0\u5b88\0\u5bc2\0\u5bfc\0\u5c36\0\u5c70\0\u5caa"+
    "\0\u5ce4\0\u5d1e\0\u5d58\0\u5d92\0\u5dcc\0\u5e06\0\u5e40\0\u5e7a"+
    "\0\u5eb4\0\u5eee\0\u5f28\0\u5f62\0\u5f9c\0\u5fd6\0\u5e06\0\u5e06"+
    "\0\u5e40\0\u6010\0\u604a\0\u6084\0\u60be";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[453];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\3\1\5\1\6\1\5"+
    "\3\7\1\10\1\7\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\3\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\3\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\3\1\35\1\36\1\37\1\3\1\40\1\41"+
    "\1\3\1\42\1\43\1\44\1\17\1\45\1\46\1\47"+
    "\1\3\1\50\1\51\1\52\1\0\1\53\1\54\20\55"+
    "\1\56\45\55\3\0\2\55\10\3\1\57\6\55\1\56"+
    "\2\55\2\3\1\55\27\3\6\55\2\3\1\55\2\0"+
    "\1\53\3\55\1\60\1\61\1\62\1\55\1\60\1\63"+
    "\1\60\3\55\1\64\3\55\1\56\15\55\1\65\12\55"+
    "\1\62\3\55\1\66\5\55\1\65\2\55\3\0\3\55"+
    "\2\5\2\55\1\5\1\55\1\5\3\55\1\64\3\55"+
    "\1\56\15\55\1\65\16\55\1\66\5\55\1\65\2\55"+
    "\3\0\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\11\3\1\67\15\3\6\55\2\3\1\55\2\0"+
    "\1\53\17\55\1\70\1\55\1\56\45\55\1\71\2\0"+
    "\3\55\2\64\2\55\1\64\1\55\1\64\5\55\1\70"+
    "\1\55\1\56\45\55\1\71\2\0\12\55\5\7\2\55"+
    "\1\56\45\55\3\0\20\55\2\72\45\55\3\0\1\55"+
    "\20\72\1\73\45\72\3\0\1\72\20\55\1\56\1\17"+
    "\1\74\2\55\1\17\1\55\1\75\3\55\1\76\15\55"+
    "\1\77\5\55\1\17\1\100\1\101\4\55\3\0\21\55"+
    "\1\56\4\55\1\102\40\55\3\0\2\55\10\3\1\57"+
    "\6\55\1\56\2\55\2\3\1\55\11\3\1\103\5\3"+
    "\1\104\7\3\6\55\2\3\1\55\2\0\1\53\21\55"+
    "\1\56\1\17\3\55\1\17\1\55\1\75\3\55\1\76"+
    "\15\55\1\77\5\55\1\17\1\100\1\101\4\55\3\0"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\1\105\26\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\6\3\1\106\1\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\11\3\1\107\1\110\1\111\13\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\6\55\1\56"+
    "\2\55\2\3\1\55\7\3\1\112\17\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\6\55\1\56"+
    "\2\55\1\3\1\113\1\55\11\3\1\114\15\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\1\3\1\115\1\116\2\3"+
    "\1\117\21\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\11\3"+
    "\1\120\15\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\6\3"+
    "\1\121\3\3\1\122\1\123\4\3\1\110\6\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\2\3\1\124\1\3\1\125"+
    "\1\3\1\126\4\3\1\127\6\3\1\130\1\131\3\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\6\55\1\56\2\55\2\3\1\55\10\3\1\132\16\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\6\55\1\56\2\55\2\3\1\55\3\3\1\133\15\3"+
    "\1\134\5\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\1\3"+
    "\1\135\6\3\1\136\16\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\5\3\1\110\1\3\1\137\1\140\16\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\7\3\1\141\17\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\12\3\1\142\1\122\13\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\6\55\1\56\2\55\2\3\1\55\5\3\1\143\1\3"+
    "\1\144\7\3\1\145\7\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\1\3"+
    "\1\146\1\55\27\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\5\3\1\25\21\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\2\3\1\147\2\3\1\150\21\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\6\55\1\56\2\55"+
    "\2\3\1\55\1\3\1\151\25\3\6\55\2\3\1\55"+
    "\2\0\1\53\3\55\1\4\1\5\2\55\1\5\1\55"+
    "\1\5\3\55\1\152\3\55\1\56\45\55\3\0\21\55"+
    "\1\56\37\55\1\17\5\55\3\0\21\55\1\56\40\55"+
    "\1\17\4\55\3\0\2\55\1\153\2\55\2\153\1\55"+
    "\1\153\10\55\1\56\2\55\2\153\1\55\27\153\6\55"+
    "\2\153\1\55\2\0\1\154\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\11\3\1\155\15\3\6\55"+
    "\2\3\1\55\2\0\1\53\1\55\20\156\1\157\44\156"+
    "\1\160\3\0\1\156\11\0\5\161\55\0\10\53\1\162"+
    "\11\0\2\53\1\0\27\53\6\0\2\53\3\0\1\53"+
    "\1\0\20\163\1\164\45\163\3\0\1\165\17\55\1\166"+
    "\1\56\45\55\3\0\3\55\1\60\1\61\2\55\1\60"+
    "\1\55\1\60\3\55\1\64\3\55\1\56\15\55\1\65"+
    "\16\55\1\66\5\55\1\65\2\55\3\0\3\55\2\61"+
    "\2\55\1\61\1\55\1\61\3\55\1\64\3\55\1\56"+
    "\15\55\1\65\16\55\1\66\5\55\1\65\2\55\3\0"+
    "\3\55\2\167\1\55\4\167\7\55\1\56\6\55\1\167"+
    "\2\55\1\167\3\55\1\167\3\55\1\167\3\55\1\167"+
    "\5\55\1\167\6\55\1\167\2\55\3\0\3\55\1\170"+
    "\5\55\1\170\7\55\1\56\45\55\3\0\3\55\2\171"+
    "\2\55\1\171\1\55\1\171\7\55\1\56\15\55\1\65"+
    "\16\55\1\66\5\55\1\65\2\55\3\0\3\55\2\172"+
    "\2\55\1\172\1\55\1\172\7\55\1\56\34\55\1\66"+
    "\10\55\3\0\3\55\2\172\2\55\1\172\1\55\1\172"+
    "\7\55\1\56\45\55\3\0\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\10\3\1\173\16\3\6\55"+
    "\2\3\1\55\2\0\1\53\1\55\72\0\66\72\3\0"+
    "\1\72\20\55\1\56\2\55\1\174\42\55\3\0\21\55"+
    "\1\56\20\55\1\175\24\55\3\0\21\55\1\56\16\55"+
    "\1\17\26\55\3\0\21\55\1\56\12\55\1\76\32\55"+
    "\3\0\10\55\1\176\10\55\1\56\1\177\1\200\1\201"+
    "\2\55\1\202\1\203\1\204\1\205\1\206\1\207\1\55"+
    "\1\210\1\211\1\212\1\213\1\214\1\215\1\216\1\55"+
    "\1\217\1\220\1\221\1\55\1\222\1\223\13\55\3\0"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\5\3\1\224\1\3\1\225\17\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\6\3\1\226\1\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\27\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\6\55\1\56\2\55"+
    "\1\3\1\227\1\55\27\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\12\3\1\230\14\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\11\3\1\231\15\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\6\3\1\6\1\3\1\57\6\55\1\56"+
    "\1\177\1\200\1\16\1\3\1\55\1\20\1\232\1\22"+
    "\1\23\1\24\1\233\1\3\1\26\1\27\1\30\1\31"+
    "\1\32\1\234\1\34\1\3\1\35\1\36\1\37\1\3"+
    "\1\235\1\41\2\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\14\3\1\120\12\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\12\3\1\236\14\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\11\3\1\237\15\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\1\3\1\240\13\3\1\110\11\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\6\55\1\56\2\55"+
    "\2\3\1\55\2\3\1\241\1\242\6\3\1\142\14\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\6\55\1\56\2\55\2\3\1\55\1\3\1\243\3\3"+
    "\1\244\21\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\13\3"+
    "\1\245\13\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\6\3\1\6\1\3\1\57\6\55\1\56\1\14\1\200"+
    "\1\16\1\3\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\3\1\26\1\27\1\30\1\31\1\32\1\234"+
    "\1\34\1\3\1\35\1\36\1\37\1\3\1\40\1\41"+
    "\2\3\2\55\1\17\1\100\1\101\1\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\6\55\1\56\2\55"+
    "\1\246\1\3\1\55\27\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\12\3\1\247\14\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\3\3\1\250\1\251\5\3\1\252\14\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\12\3\1\142\14\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\1\3\1\253\1\55\27\3\6\55\2\3"+
    "\1\55\2\0\1\53\2\55\10\3\1\57\6\55\1\56"+
    "\2\55\1\254\1\3\1\55\27\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\6\55\1\56\2\55"+
    "\2\3\1\55\14\3\1\255\12\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\6\55\1\56\2\55"+
    "\2\3\1\55\1\3\1\256\25\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\6\55\1\56\2\55"+
    "\2\3\1\55\3\3\1\257\3\3\1\236\17\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\3\3\1\260\21\3\1\261"+
    "\1\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\1\3\1\262"+
    "\25\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\7\3\1\263"+
    "\17\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\6\3\1\264"+
    "\20\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\21\3\1\110"+
    "\5\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\10\3\1\265"+
    "\16\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\4\3\1\266"+
    "\13\3\1\267\6\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\10\3\1\270\16\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\10\3\1\110\16\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\11\3\1\271\15\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\13\3\1\272\13\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\13\3\1\273\13\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\7\3\1\274\17\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\5\3\1\275\21\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\3\3\1\253\23\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\2\3\1\276\24\3\6\55\2\3\1\55\2\0\1\53"+
    "\3\55\2\64\2\55\1\64\1\55\1\64\7\55\1\56"+
    "\45\55\3\0\2\55\10\153\7\55\1\56\2\55\2\153"+
    "\1\55\27\153\6\55\2\153\1\55\2\0\1\154\1\55"+
    "\1\0\10\154\12\0\2\154\1\0\27\154\6\0\2\154"+
    "\3\0\1\154\1\0\1\55\10\3\1\57\6\55\1\56"+
    "\2\55\2\3\1\55\17\3\1\277\7\3\6\55\2\3"+
    "\1\55\2\0\1\53\1\55\17\156\1\300\1\157\44\156"+
    "\1\160\3\0\1\156\16\0\1\71\47\0\1\71\3\0"+
    "\17\163\1\301\1\164\45\163\3\0\1\165\1\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\1\3\1\302"+
    "\25\3\6\55\2\3\1\55\2\0\1\53\21\55\1\56"+
    "\3\55\1\303\41\55\3\0\21\55\1\56\21\55\1\17"+
    "\23\55\3\0\21\55\1\56\16\55\1\304\26\55\3\0"+
    "\21\55\1\56\1\55\1\74\43\55\3\0\21\55\1\56"+
    "\16\55\1\305\5\55\1\306\20\55\3\0\21\55\1\56"+
    "\5\55\1\307\37\55\3\0\10\55\1\310\10\55\1\56"+
    "\16\55\1\311\1\102\1\312\24\55\3\0\21\55\1\56"+
    "\14\55\1\313\30\55\3\0\21\55\1\56\3\55\1\314"+
    "\12\55\1\315\26\55\3\0\21\55\1\56\6\55\1\316"+
    "\1\317\2\55\1\320\32\55\3\0\21\55\1\56\16\55"+
    "\1\102\26\55\3\0\21\55\1\56\13\55\1\321\3\55"+
    "\1\322\1\323\4\55\1\102\17\55\3\0\21\55\1\56"+
    "\7\55\1\324\1\55\1\325\1\55\1\326\4\55\1\327"+
    "\6\55\1\330\1\331\14\55\3\0\21\55\1\56\15\55"+
    "\1\332\27\55\3\0\21\55\1\56\10\55\1\333\15\55"+
    "\1\334\16\55\3\0\21\55\1\56\6\55\1\335\6\55"+
    "\1\336\27\55\3\0\21\55\1\56\12\55\1\102\1\55"+
    "\1\337\1\340\27\55\3\0\21\55\1\56\14\55\1\341"+
    "\30\55\3\0\21\55\1\56\17\55\1\342\1\322\24\55"+
    "\3\0\21\55\1\56\12\55\1\343\1\55\1\344\7\55"+
    "\1\345\20\55\3\0\21\55\1\56\3\55\1\346\41\55"+
    "\3\0\21\55\1\56\12\55\1\207\32\55\3\0\21\55"+
    "\1\56\7\55\1\347\2\55\1\350\32\55\3\0\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\3\3"+
    "\1\351\23\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\13\3"+
    "\1\110\6\3\1\352\4\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\2\3\1\353\24\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\1\3\1\354\25\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\3\3\1\355\23\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\1\3\1\356\25\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\6\3\1\106\1\3\1\57\6\55\1\56"+
    "\2\55\2\3\1\55\11\3\1\107\1\110\1\357\13\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\6\55\1\56\2\55\2\3\1\55\11\3\1\110\15\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\6\55\1\56\2\55\2\3\1\55\5\3\1\110\1\3"+
    "\1\137\1\360\16\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\5\3\1\233\21\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\3\3\1\265\23\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\5\3\1\136\21\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\7\3\1\361\17\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\2\3\1\362\24\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\4\3\1\363\22\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\12\3\1\364\14\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\13\3\1\142\13\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\3\3\1\365\6\3\1\361\14\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\6\55\1\56\2\55"+
    "\2\3\1\55\2\3\1\366\24\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\6\55\1\56\2\55"+
    "\2\3\1\55\10\3\1\236\16\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\6\55\1\56\2\55"+
    "\2\3\1\55\10\3\1\367\16\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\6\55\1\56\2\55"+
    "\2\3\1\55\2\3\1\370\24\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\6\55\1\56\2\55"+
    "\2\3\1\55\3\3\1\371\23\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\6\55\1\56\2\55"+
    "\2\3\1\55\5\3\1\110\21\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\6\55\1\56\2\55"+
    "\2\3\1\55\3\3\1\356\23\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\6\55\1\56\2\55"+
    "\2\3\1\55\7\3\1\372\2\3\1\373\1\3\1\374"+
    "\3\3\1\375\1\37\5\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\2\3\1\265\24\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\10\3\1\376\16\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\17\3\1\377\7\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\17\3\1\u0100\7\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\3\3\1\353\23\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\3\3\1\242\23\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\10\3\1\u0101\16\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\u0102\6\55\1\56\2\55\2\3"+
    "\1\55\27\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\2\3"+
    "\1\u0103\24\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\1\3"+
    "\1\u0104\5\3\1\u0105\17\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\2\3\1\357\24\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\6\3\1\6\1\3\1\57\6\55\1\56"+
    "\1\177\1\200\1\16\1\3\1\55\1\20\1\232\1\22"+
    "\1\23\1\24\1\233\1\3\1\26\1\u0106\1\30\1\31"+
    "\1\32\1\234\1\34\1\3\1\35\1\36\1\37\1\3"+
    "\1\235\1\41\2\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\1\3\1\u0107\25\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\4\3\1\u0108\22\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\2\3\1\142\24\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\6\3\1\u0109\1\3\1\57\6\55\1\56\2\55"+
    "\2\3\1\55\27\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\12\3\1\277\14\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\10\3\1\u010a\16\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\16\3\1\110\10\3\6\55\2\3\1\55\2\0\1\53"+
    "\21\55\1\56\2\55\1\102\42\55\3\0\21\55\1\56"+
    "\15\55\1\u010b\27\55\3\0\21\55\1\56\12\55\1\u010c"+
    "\1\55\1\u010d\30\55\3\0\10\55\1\u010e\10\55\1\56"+
    "\45\55\3\0\21\55\1\56\3\55\1\u010f\41\55\3\0"+
    "\21\55\1\56\17\55\1\u0110\25\55\3\0\21\55\1\56"+
    "\16\55\1\u0111\26\55\3\0\21\55\1\56\21\55\1\102"+
    "\23\55\3\0\21\55\1\56\17\55\1\u0112\25\55\3\0"+
    "\21\55\1\56\16\55\1\u0113\26\55\3\0\21\55\1\56"+
    "\6\55\1\u0114\13\55\1\102\22\55\3\0\21\55\1\56"+
    "\7\55\1\u0115\1\u0116\6\55\1\342\25\55\3\0\21\55"+
    "\1\56\6\55\1\u0117\3\55\1\u0118\32\55\3\0\21\55"+
    "\1\56\20\55\1\u0119\24\55\3\0\21\55\1\56\2\55"+
    "\1\u011a\42\55\3\0\21\55\1\56\17\55\1\u011b\25\55"+
    "\3\0\21\55\1\56\10\55\1\u011c\1\u011d\5\55\1\u011e"+
    "\25\55\3\0\21\55\1\56\17\55\1\342\25\55\3\0"+
    "\21\55\1\56\3\55\1\u011f\41\55\3\0\21\55\1\56"+
    "\2\55\1\u0120\42\55\3\0\21\55\1\56\21\55\1\u0121"+
    "\23\55\3\0\21\55\1\56\6\55\1\u0122\36\55\3\0"+
    "\21\55\1\56\10\55\1\u0123\3\55\1\u0112\30\55\3\0"+
    "\21\55\1\56\10\55\1\u0124\21\55\1\u0125\12\55\3\0"+
    "\21\55\1\56\6\55\1\u0126\36\55\3\0\21\55\1\56"+
    "\14\55\1\u0127\30\55\3\0\21\55\1\56\13\55\1\u0128"+
    "\31\55\3\0\21\55\1\56\26\55\1\102\16\55\3\0"+
    "\21\55\1\56\15\55\1\u0129\27\55\3\0\21\55\1\56"+
    "\11\55\1\u012a\13\55\1\u012b\17\55\3\0\21\55\1\56"+
    "\15\55\1\u012c\27\55\3\0\21\55\1\56\15\55\1\102"+
    "\27\55\3\0\21\55\1\56\16\55\1\u012d\26\55\3\0"+
    "\21\55\1\56\20\55\1\u012e\24\55\3\0\21\55\1\56"+
    "\20\55\1\u012f\24\55\3\0\21\55\1\56\14\55\1\u0130"+
    "\30\55\3\0\21\55\1\56\12\55\1\u0131\32\55\3\0"+
    "\21\55\1\56\10\55\1\u011f\34\55\3\0\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\10\3\1\u0132"+
    "\16\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\1\3\1\u0133"+
    "\25\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\7\3\1\u0134"+
    "\17\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\2\3\1\u0135"+
    "\24\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\11\3\1\u0136"+
    "\15\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\15\3\1\265"+
    "\11\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\14\3\1\110"+
    "\12\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\4\3\1\266"+
    "\13\3\1\u0137\6\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\3\3\1\110\23\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\1\3\1\u0138\25\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\1\3\1\110"+
    "\1\55\27\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\12\3"+
    "\1\110\14\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\7\3"+
    "\1\u0139\17\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\10\3"+
    "\1\u013a\16\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\11\3"+
    "\1\u013b\15\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\17\3"+
    "\1\u013c\7\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\1\3"+
    "\1\u013d\6\3\1\u013e\16\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\20\3\1\110\6\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\21\3\1\134\5\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\10\3\1\u013f\16\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\5\3\1\143\21\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\13\3\1\u0140\13\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\11\3\1\u0141\15\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\7\3\1\u0142\17\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\12\3\1\u0143\14\3\6\55\2\3\1\55\2\0"+
    "\1\53\13\55\1\102\5\55\1\56\45\55\3\0\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\1\3"+
    "\1\u0144\25\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\17\3"+
    "\1\u0145\7\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\13\3"+
    "\1\u0146\13\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\1\3"+
    "\1\242\1\124\1\3\1\125\1\3\1\126\4\3\1\127"+
    "\6\3\1\130\1\131\3\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\2\3\1\u0147\24\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\3\3\1\u0148\23\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\1\3\1\u0149\25\3\6\55\2\3\1\55\2\0"+
    "\1\53\21\55\1\56\6\55\1\u014a\36\55\3\0\21\55"+
    "\1\56\10\55\1\u014b\34\55\3\0\21\55\1\56\20\55"+
    "\1\102\6\55\1\u014c\15\55\3\0\21\55\1\56\7\55"+
    "\1\u014d\35\55\3\0\21\55\1\56\6\55\1\u014e\36\55"+
    "\3\0\21\55\1\56\10\55\1\u014f\34\55\3\0\21\55"+
    "\1\56\6\55\1\u0150\36\55\3\0\21\55\1\56\10\55"+
    "\1\u0129\34\55\3\0\21\55\1\56\12\55\1\336\32\55"+
    "\3\0\21\55\1\56\14\55\1\u0151\30\55\3\0\21\55"+
    "\1\56\7\55\1\u0152\35\55\3\0\21\55\1\56\11\55"+
    "\1\u0153\33\55\3\0\21\55\1\56\17\55\1\u0154\25\55"+
    "\3\0\21\55\1\56\20\55\1\342\24\55\3\0\21\55"+
    "\1\56\10\55\1\u0155\6\55\1\u0151\25\55\3\0\21\55"+
    "\1\56\7\55\1\u0156\35\55\3\0\21\55\1\56\15\55"+
    "\1\u0112\27\55\3\0\21\55\1\56\15\55\1\u0157\27\55"+
    "\3\0\21\55\1\56\7\55\1\u0158\35\55\3\0\21\55"+
    "\1\56\10\55\1\u0159\34\55\3\0\21\55\1\56\12\55"+
    "\1\102\32\55\3\0\21\55\1\56\10\55\1\u0150\34\55"+
    "\3\0\21\55\1\56\14\55\1\u015a\2\55\1\u015b\1\55"+
    "\1\u015c\3\55\1\u015d\1\221\16\55\3\0\21\55\1\56"+
    "\7\55\1\u0129\35\55\3\0\21\55\1\56\15\55\1\u015e"+
    "\27\55\3\0\21\55\1\56\24\55\1\u015f\20\55\3\0"+
    "\21\55\1\56\24\55\1\u0160\20\55\3\0\21\55\1\56"+
    "\10\55\1\u014d\34\55\3\0\21\55\1\56\10\55\1\u0116"+
    "\34\55\3\0\21\55\1\56\15\55\1\u0161\27\55\3\0"+
    "\12\55\1\u0162\6\55\1\56\45\55\3\0\21\55\1\56"+
    "\7\55\1\u0163\35\55\3\0\21\55\1\56\6\55\1\u0164"+
    "\36\55\3\0\21\55\1\56\7\55\1\312\35\55\3\0"+
    "\10\55\1\176\10\55\1\56\1\177\1\200\1\201\2\55"+
    "\1\202\1\203\1\204\1\205\1\206\1\207\1\55\1\210"+
    "\1\u0165\1\212\1\213\1\214\1\215\1\216\1\55\1\217"+
    "\1\220\1\221\1\55\1\222\1\223\13\55\3\0\21\55"+
    "\1\56\6\55\1\u0166\36\55\3\0\21\55\1\56\11\55"+
    "\1\u0167\33\55\3\0\21\55\1\56\7\55\1\342\35\55"+
    "\3\0\10\55\1\u0168\10\55\1\56\45\55\3\0\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\4\3"+
    "\1\u0169\22\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\3\3"+
    "\1\142\23\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\4\3"+
    "\1\110\22\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\3\3"+
    "\1\u016a\23\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\1\3"+
    "\1\u016b\25\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\1\3"+
    "\1\u0104\25\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\6\3\1\274\1\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\27\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\13\3"+
    "\1\u016c\13\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\6\3"+
    "\1\u016d\20\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\20\3"+
    "\1\u016e\6\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\14\3"+
    "\1\u016f\12\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\13\3"+
    "\1\u0170\13\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\1\3"+
    "\1\u0171\25\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\4\3"+
    "\1\266\22\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\14\3"+
    "\1\364\12\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\13\3"+
    "\1\110\13\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\11\3"+
    "\1\u016f\15\3\6\55\2\3\1\55\2\0\1\53\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\1\u016e\1\3\1\55"+
    "\27\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\11\3\1\142"+
    "\15\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\2\3\1\361"+
    "\24\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\10\3\1\u0172"+
    "\16\3\6\55\2\3\1\55\2\0\1\53\2\55\6\3"+
    "\1\6\1\3\1\57\6\55\1\56\1\177\1\200\1\16"+
    "\1\3\1\55\1\20\1\232\1\u0173\1\23\1\24\1\233"+
    "\1\3\1\26\1\27\1\30\1\31\1\32\1\234\1\34"+
    "\1\3\1\35\1\36\1\37\1\3\1\235\1\41\2\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\6\55\1\56\2\55\2\3\1\55\7\3\1\u0174\17\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\6\55\1\56\2\55\2\3\1\55\2\3\1\110\24\3"+
    "\6\55\2\3\1\55\2\0\1\53\21\55\1\56\23\55"+
    "\1\102\21\55\3\0\21\55\1\56\15\55\1\u0175\27\55"+
    "\3\0\21\55\1\56\6\55\1\u0176\36\55\3\0\21\55"+
    "\1\56\14\55\1\u0177\30\55\3\0\21\55\1\56\7\55"+
    "\1\u0178\35\55\3\0\21\55\1\56\16\55\1\u0179\26\55"+
    "\3\0\21\55\1\56\22\55\1\u0129\22\55\3\0\21\55"+
    "\1\56\10\55\1\102\34\55\3\0\21\55\1\56\6\55"+
    "\1\u017a\36\55\3\0\21\55\1\56\3\55\1\102\41\55"+
    "\3\0\21\55\1\56\17\55\1\102\25\55\3\0\21\55"+
    "\1\56\14\55\1\u017b\30\55\3\0\21\55\1\56\15\55"+
    "\1\u017c\27\55\3\0\21\55\1\56\16\55\1\u017d\26\55"+
    "\3\0\21\55\1\56\24\55\1\u017e\20\55\3\0\21\55"+
    "\1\56\6\55\1\u017f\6\55\1\u0180\27\55\3\0\21\55"+
    "\1\56\25\55\1\102\17\55\3\0\21\55\1\56\26\55"+
    "\1\334\16\55\3\0\21\55\1\56\15\55\1\u0181\27\55"+
    "\3\0\21\55\1\56\12\55\1\343\32\55\3\0\21\55"+
    "\1\56\20\55\1\u0182\24\55\3\0\21\55\1\56\16\55"+
    "\1\u0183\26\55\3\0\21\55\1\56\14\55\1\u0184\30\55"+
    "\3\0\21\55\1\56\17\55\1\u0185\25\55\3\0\21\55"+
    "\1\56\6\55\1\u0186\36\55\3\0\21\55\1\56\24\55"+
    "\1\u0187\20\55\3\0\21\55\1\56\6\55\1\u0116\1\324"+
    "\1\55\1\325\1\55\1\326\4\55\1\327\6\55\1\330"+
    "\1\331\14\55\3\0\21\55\1\56\7\55\1\u0188\35\55"+
    "\3\0\21\55\1\56\10\55\1\u0189\34\55\3\0\21\55"+
    "\1\56\6\55\1\u018a\36\55\3\0\2\55\10\3\1\57"+
    "\6\55\1\56\2\55\2\3\1\55\3\3\1\u018b\23\3"+
    "\6\55\2\3\1\55\2\0\1\53\2\55\10\3\1\57"+
    "\6\55\1\56\2\55\2\3\1\55\1\u018c\26\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\4\3\1\361\22\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\17\3\1\142\7\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\10\3\1\u018d\16\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\1\3\1\u018e\25\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\10\3\1\u018f\16\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\4\3\1\u0190\22\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\14\3\1\u0191\12\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\u0192\6\55"+
    "\1\56\2\55\2\3\1\55\27\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\10\3\1\57\6\55\1\56\2\55"+
    "\2\3\1\55\7\3\1\112\5\3\1\110\11\3\6\55"+
    "\2\3\1\55\2\0\1\53\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\5\3\1\u0141\21\3\6\55"+
    "\2\3\1\55\2\0\1\53\21\55\1\56\11\55\1\u0193"+
    "\33\55\3\0\21\55\1\56\10\55\1\342\34\55\3\0"+
    "\21\55\1\56\11\55\1\102\33\55\3\0\21\55\1\56"+
    "\10\55\1\u0194\34\55\3\0\21\55\1\56\6\55\1\u0195"+
    "\36\55\3\0\10\55\1\u0130\10\55\1\56\45\55\3\0"+
    "\21\55\1\56\20\55\1\u0196\24\55\3\0\21\55\1\56"+
    "\13\55\1\u0197\31\55\3\0\21\55\1\56\25\55\1\u0198"+
    "\17\55\3\0\21\55\1\56\21\55\1\u0199\23\55\3\0"+
    "\21\55\1\56\20\55\1\u019a\24\55\3\0\21\55\1\56"+
    "\6\55\1\u019b\36\55\3\0\21\55\1\56\11\55\1\u012a"+
    "\33\55\3\0\21\55\1\56\21\55\1\u0154\23\55\3\0"+
    "\21\55\1\56\20\55\1\102\24\55\3\0\21\55\1\56"+
    "\16\55\1\u0199\26\55\3\0\21\55\1\56\2\55\1\u0198"+
    "\42\55\3\0\21\55\1\56\16\55\1\342\26\55\3\0"+
    "\21\55\1\56\7\55\1\u0151\35\55\3\0\10\55\1\176"+
    "\10\55\1\56\1\177\1\200\1\201\2\55\1\202\1\203"+
    "\1\u019c\1\205\1\206\1\207\1\55\1\210\1\211\1\212"+
    "\1\213\1\214\1\215\1\216\1\55\1\217\1\220\1\221"+
    "\1\55\1\222\1\223\13\55\3\0\21\55\1\56\14\55"+
    "\1\u019d\30\55\3\0\21\55\1\56\7\55\1\102\35\55"+
    "\3\0\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\10\3\1\357\16\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\4\3\1\u019e\22\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\13\3\1\u019f\13\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\4\3\1\142\22\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\6\3\1\6\1\3\1\57\6\55\1\56"+
    "\1\177\1\200\1\16\1\3\1\55\1\u01a0\1\232\1\22"+
    "\1\23\1\24\1\233\1\3\1\26\1\27\1\30\1\31"+
    "\1\32\1\234\1\34\1\3\1\35\1\36\1\37\1\3"+
    "\1\235\1\41\2\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\10\3\1\u0191\16\3\6\55\2\3\1\55\2\0\1\53"+
    "\2\55\10\3\1\57\6\55\1\56\2\55\2\3\1\55"+
    "\5\3\1\372\21\3\6\55\2\3\1\55\2\0\1\53"+
    "\21\55\1\56\45\55\3\0\1\u01a1\20\55\1\56\10\55"+
    "\1\u01a2\34\55\3\0\21\55\1\56\5\55\1\u01a3\37\55"+
    "\3\0\21\55\1\56\11\55\1\u0151\33\55\3\0\21\55"+
    "\1\56\24\55\1\342\20\55\3\0\21\55\1\56\15\55"+
    "\1\u01a4\27\55\3\0\21\55\1\56\6\55\1\u01a5\36\55"+
    "\3\0\21\55\1\56\15\55\1\u01a6\27\55\3\0\21\55"+
    "\1\56\11\55\1\u01a7\33\55\3\0\21\55\1\56\21\55"+
    "\1\u01a8\23\55\3\0\21\55\1\56\14\55\1\313\5\55"+
    "\1\102\22\55\3\0\21\55\1\56\12\55\1\u0183\32\55"+
    "\3\0\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\5\3\1\u01a9\21\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\3\3\1\364\23\3\6\55\2\3\1\55\2\0"+
    "\1\53\2\55\10\3\1\57\6\55\1\56\2\55\2\3"+
    "\1\55\1\105\4\3\1\u01aa\21\3\6\55\2\3\1\55"+
    "\2\0\1\53\2\55\1\u01ab\2\55\2\u01ab\1\55\1\u01ab"+
    "\10\55\1\56\2\55\2\u01ab\1\55\27\u01ab\6\55\2\u01ab"+
    "\1\55\2\0\1\u01ac\21\55\1\56\15\55\1\312\27\55"+
    "\3\0\21\55\1\56\11\55\1\u01ad\33\55\3\0\21\55"+
    "\1\56\20\55\1\u01ae\24\55\3\0\21\55\1\56\11\55"+
    "\1\342\33\55\3\0\10\55\1\176\10\55\1\56\1\177"+
    "\1\200\1\201\2\55\1\u01af\1\203\1\204\1\205\1\206"+
    "\1\207\1\55\1\210\1\211\1\212\1\213\1\214\1\215"+
    "\1\216\1\55\1\217\1\220\1\221\1\55\1\222\1\223"+
    "\13\55\3\0\21\55\1\56\15\55\1\u01a8\27\55\3\0"+
    "\21\55\1\56\12\55\1\u015a\32\55\3\0\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\6\3\1\u01b0"+
    "\20\3\6\55\2\3\1\55\2\0\1\53\2\55\10\3"+
    "\1\57\6\55\1\56\2\55\2\3\1\55\13\3\1\u018e"+
    "\13\3\6\55\2\3\1\55\2\0\1\53\2\55\10\u01ab"+
    "\4\55\1\u01b1\2\55\1\56\2\55\2\u01ab\1\55\27\u01ab"+
    "\6\55\2\u01ab\1\55\2\0\1\u01ac\1\55\1\0\10\u01ac"+
    "\4\0\1\u01b2\5\0\2\u01ac\1\0\27\u01ac\6\0\2\u01ac"+
    "\3\0\1\u01ac\1\0\20\55\1\56\12\55\1\u01b3\32\55"+
    "\3\0\21\55\1\56\10\55\1\u0154\34\55\3\0\21\55"+
    "\1\56\5\55\1\307\4\55\1\u01b4\32\55\3\0\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\1\u01b5\1\3\1\55"+
    "\27\3\6\55\2\3\1\55\2\0\1\53\21\55\1\56"+
    "\44\55\1\u01b6\3\0\1\55\65\0\1\u01b7\4\0\20\55"+
    "\1\56\13\55\1\u01b8\31\55\3\0\21\55\1\56\20\55"+
    "\1\u01a5\24\55\3\0\2\55\10\3\1\57\6\55\1\56"+
    "\2\55\2\3\1\55\7\3\1\u01b9\17\3\6\55\2\3"+
    "\1\55\2\0\1\53\1\55\20\u01b6\1\u01ba\44\u01b6\1\u01bb"+
    "\3\0\1\u01b6\65\u01b7\1\u01bc\3\0\1\u01b7\20\55\1\56"+
    "\2\55\1\u01bd\42\55\3\0\2\55\10\3\1\57\6\55"+
    "\1\56\2\55\2\3\1\55\2\3\1\u01be\24\3\6\55"+
    "\2\3\1\55\2\0\1\53\1\55\17\u01b6\1\u01bf\1\u01ba"+
    "\44\u01b6\1\u01bb\3\0\13\u01b6\1\u01c0\5\u01b6\1\u01ba\44\u01b6"+
    "\1\u01bb\3\0\1\u01b6\12\u01b7\1\u01c1\52\u01b7\1\u01bc\3\0"+
    "\1\u01b7\20\55\1\56\14\55\1\u01c2\30\55\3\0\2\55"+
    "\10\3\1\57\6\55\1\56\2\55\2\3\1\55\10\3"+
    "\1\u01c3\16\3\6\55\2\3\1\55\2\0\1\53\21\55"+
    "\1\56\7\55\1\u01c4\35\55\3\0\2\55\10\3\1\57"+
    "\6\55\1\56\2\55\2\3\1\55\11\3\1\265\15\3"+
    "\6\55\2\3\1\55\2\0\1\53\21\55\1\56\15\55"+
    "\1\u01c5\27\55\3\0\21\55\1\56\16\55\1\u0129\26\55"+
    "\3\0\1\55";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24824];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\53\1\2\0\3\1\5\0\2\1\1\11\2\1"+
    "\6\0\50\1\1\0\3\1\2\0\2\1\1\11\2\0"+
    "\7\1\30\0\57\1\46\0\42\1\42\0\1\1\4\0"+
    "\30\1\37\0\14\1\23\0\1\1\2\0\10\1\13\0"+
    "\3\1\5\0\1\1\2\0\2\1\5\0\1\1\4\0"+
    "\1\1\3\0\1\1\4\0\4\1\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[453];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 16: break;
          case 2: 
            { lexeme=yytext(); return ID;
            }
          case 17: break;
          case 3: 
            { lexeme=yytext(); return INT;
            }
          case 18: break;
          case 4: 
            { lexeme=yytext(); return PUNTUACTION;
            }
          case 19: break;
          case 5: 
            { /*Ignore*/
            }
          case 20: break;
          case 6: 
            { lexeme=yytext(); return ARITMETIC_OPERATOR;
            }
          case 21: break;
          case 7: 
            { lexeme=yytext(); return LOGIC_OPERATOR;
            }
          case 22: break;
          case 8: 
            { lexeme=yytext(); return FUNCTION;
            }
          case 23: break;
          case 9: 
            { lexeme=yytext(); return FLOAT;
            }
          case 24: break;
          case 10: 
            { lexeme=yytext(); return COMMENT;
            }
          case 25: break;
          case 11: 
            { lexeme=yytext(); return RESERVED;
            }
          case 26: break;
          case 12: 
            { lexeme=yytext(); return VAR;
            }
          case 27: break;
          case 13: 
            { lexeme=yytext(); return STRING;
            }
          case 28: break;
          case 14: 
            { lexeme=yytext(); return BOOLEAN;
            }
          case 29: break;
          case 15: 
            { lexeme=yytext(); return CONSTANT;
            }
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
