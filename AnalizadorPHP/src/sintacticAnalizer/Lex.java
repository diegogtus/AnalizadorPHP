package sintacticAnalizer;

/* The following code was generated by JFlex 1.6.1 */

/*IMPORTACIONES*/
import static sintacticAnalizer.Token.*;

//DEFINICIONES

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/diego/Documents/NetBeansProjects/AnalizadorPHP/AnalizadorPHP/src/analizerphp/Lexer.flex</tt>
 */
class Lex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\63\1\64\1\64\1\63\22\0\1\3\1\60\1\67"+
    "\1\0\1\55\1\0\1\61\1\0\1\22\1\23\1\5\1\57\1\65"+
    "\1\54\1\0\1\4\12\2\1\0\1\66\1\0\1\56\3\0\1\45"+
    "\1\44\3\1\1\43\2\1\1\42\2\1\1\52\1\1\1\50\1\46"+
    "\2\1\1\53\1\41\1\1\1\51\5\1\4\0\1\6\1\0\1\10"+
    "\1\24\1\13\1\27\1\20\1\33\1\37\1\7\1\17\1\47\1\31"+
    "\1\11\1\15\1\26\1\14\1\16\1\40\1\21\1\25\1\12\1\32"+
    "\1\35\1\34\1\36\1\30\1\1\1\0\1\62\10\0\1\64\u1fa2\0"+
    "\1\64\1\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\34\2"+
    "\1\7\1\10\1\11\1\12\1\13\2\1\1\14\1\15"+
    "\1\16\1\4\1\0\3\2\1\17\52\2\1\20\1\21"+
    "\1\22\2\0\42\2\1\17\14\2\1\0\30\2\1\0"+
    "\14\2\1\23\22\2\1\17\2\2\1\17\17\2\24\0"+
    "\11\2\1\17\2\2\45\0\4\2\42\0\1\17\4\0"+
    "\2\2\36\0\1\2\23\0\1\17\2\0\1\2\13\0"+
    "\1\2\4\0\1\17\2\0\1\2\3\0\1\2\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[420];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\70\0\340\0\70\0\u0118"+
    "\0\u0150\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658"+
    "\0\u0690\0\u06c8\0\u0700\0\250\0\70\0\u0738\0\250\0\70"+
    "\0\u0770\0\u07a8\0\70\0\70\0\70\0\u07e0\0\u0818\0\u0850"+
    "\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10"+
    "\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50"+
    "\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110"+
    "\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\70\0\70\0\70"+
    "\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8"+
    "\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8"+
    "\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768"+
    "\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928"+
    "\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8"+
    "\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8"+
    "\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68"+
    "\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028"+
    "\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8"+
    "\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8"+
    "\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568"+
    "\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728"+
    "\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8"+
    "\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8"+
    "\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68"+
    "\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u2e28"+
    "\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8"+
    "\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138\0\u3170\0\u31a8"+
    "\0\u31e0\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8\0\u3330\0\u3368"+
    "\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480\0\u34b8\0\u34f0\0\u3528"+
    "\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640\0\u3678\0\u36b0\0\u36e8"+
    "\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800\0\u3838\0\u3870\0\u38a8"+
    "\0\u38e0\0\u3918\0\u3950\0\u3988\0\u39c0\0\u39f8\0\u3a30\0\u3a68"+
    "\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28"+
    "\0\u3c60\0\u3c98\0\u3cd0\0\u3d08\0\u3d40\0\u3d78\0\u3db0\0\u3de8"+
    "\0\u3e20\0\u3e58\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u3f70\0\u3fa8"+
    "\0\u3fe0\0\u4018\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130\0\u4168"+
    "\0\u41a0\0\u41d8\0\u4210\0\u4248\0\u4280\0\u42b8\0\u42f0\0\u4328"+
    "\0\u4360\0\u4398\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0\0\u44e8"+
    "\0\u4520\0\u4558\0\u4590\0\u45c8\0\u4600\0\u4638\0\u4670\0\u46a8"+
    "\0\u46e0\0\u4718\0\u4750\0\u4788\0\u47c0\0\u47f8\0\u4830\0\u4868"+
    "\0\u48a0\0\u48d8\0\u4910\0\u4948\0\u4980\0\u49b8\0\u49f0\0\u4a28"+
    "\0\u4a60\0\u4a98\0\u4ad0\0\u4b08\0\u4b40\0\u4b78\0\u4bb0\0\u4be8"+
    "\0\u4c20\0\u4c58\0\u4c90\0\u4cc8\0\u4d00\0\u4d38\0\u4d70\0\u4da8"+
    "\0\u4de0\0\u4e18\0\u4e50\0\u4e88\0\u4ec0\0\u4ef8\0\u4f30\0\u4f68"+
    "\0\u4fa0\0\u4fd8\0\u5010\0\u5048\0\u5080\0\u50b8\0\u50f0\0\u5128"+
    "\0\u5160\0\u5198\0\u51d0\0\u5208\0\u5240\0\u5278\0\u52b0\0\u52e8"+
    "\0\u5320\0\u5358\0\u5390\0\u53c8\0\u5400\0\u5438\0\u5470\0\u54a8"+
    "\0\u54e0\0\u5518\0\u5550\0\u5588\0\u55c0\0\u55f8\0\u5630\0\u5668"+
    "\0\u56a0\0\u56d8\0\u5710\0\u5748\0\u5780\0\u57b8\0\u57f0\0\u5828"+
    "\0\u5860\0\u5898\0\u58d0\0\u5908";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[420];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\1\13\1\14\1\15\1\3\1\16\1\17"+
    "\1\20\1\21\2\2\1\22\1\23\1\24\1\25\1\26"+
    "\1\3\1\27\1\30\1\31\1\3\1\32\1\33\1\3"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\3\1\42"+
    "\2\3\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\5\1\0\1\53\1\54\1\55\71\0\2\3"+
    "\3\0\14\3\2\0\30\3\16\0\1\4\71\0\1\56"+
    "\1\57\63\0\2\3\3\0\1\60\13\3\2\0\30\3"+
    "\15\0\2\3\3\0\13\3\1\61\2\0\1\62\1\63"+
    "\1\64\25\3\15\0\2\3\3\0\11\3\1\65\2\3"+
    "\2\0\30\3\15\0\2\3\3\0\1\3\1\66\11\3"+
    "\1\67\2\0\30\3\15\0\2\3\3\0\2\3\1\70"+
    "\1\71\2\3\1\72\5\3\2\0\30\3\15\0\2\3"+
    "\3\0\13\3\1\63\2\0\30\3\15\0\2\3\3\0"+
    "\13\3\1\73\2\0\6\3\1\74\21\3\15\0\2\3"+
    "\3\0\7\3\1\75\4\3\2\0\1\3\1\76\1\77"+
    "\4\3\1\63\20\3\15\0\2\3\3\0\3\3\1\100"+
    "\1\3\1\101\1\3\1\102\4\3\2\0\2\3\1\103"+
    "\6\3\1\104\1\105\15\3\15\0\2\3\3\0\12\3"+
    "\1\106\1\3\2\0\30\3\15\0\2\3\3\0\13\3"+
    "\1\107\2\0\30\3\15\0\2\3\3\0\4\3\1\110"+
    "\7\3\2\0\10\3\1\111\17\3\15\0\2\3\3\0"+
    "\2\3\1\112\7\3\1\113\1\3\2\0\30\3\15\0"+
    "\2\3\3\0\6\3\1\63\2\3\1\114\1\115\1\3"+
    "\2\0\30\3\15\0\2\3\3\0\11\3\1\116\2\3"+
    "\2\0\30\3\15\0\2\3\3\0\14\3\2\0\1\3"+
    "\1\117\1\76\25\3\15\0\2\3\3\0\6\3\1\120"+
    "\2\3\1\121\2\3\2\0\6\3\1\122\21\3\15\0"+
    "\2\3\3\0\1\3\1\123\12\3\2\0\30\3\15\0"+
    "\2\3\3\0\6\3\1\15\5\3\2\0\30\3\15\0"+
    "\2\3\3\0\3\3\1\124\2\3\1\125\5\3\2\0"+
    "\30\3\15\0\2\3\3\0\4\3\1\126\7\3\2\0"+
    "\30\3\15\0\2\3\3\0\14\3\2\0\2\3\1\127"+
    "\25\3\15\0\2\3\3\0\3\3\1\130\10\3\2\0"+
    "\30\3\15\0\2\3\3\0\6\3\1\131\5\3\2\0"+
    "\30\3\15\0\2\3\3\0\13\3\1\132\2\0\30\3"+
    "\15\0\2\3\3\0\14\3\2\0\1\133\27\3\15\0"+
    "\2\3\3\0\14\3\2\0\25\3\1\134\2\3\15\0"+
    "\2\3\3\0\12\3\1\135\1\3\2\0\30\3\72\0"+
    "\1\136\72\0\1\137\70\0\1\140\5\0\63\56\2\0"+
    "\3\56\5\141\1\142\62\141\1\0\2\3\3\0\1\3"+
    "\1\143\12\3\2\0\30\3\15\0\2\3\3\0\13\3"+
    "\1\144\2\0\30\3\15\0\2\3\3\0\14\3\2\0"+
    "\1\3\1\145\26\3\15\0\2\3\3\0\1\10\1\3"+
    "\1\11\1\12\1\13\1\14\1\15\1\3\1\16\1\17"+
    "\1\20\1\21\2\0\1\22\1\23\1\24\1\25\1\26"+
    "\1\3\1\27\1\30\1\31\1\3\1\32\1\33\14\3"+
    "\15\0\2\3\3\0\14\3\2\0\3\3\1\63\24\3"+
    "\15\0\2\3\3\0\14\3\2\0\1\3\1\146\26\3"+
    "\15\0\2\3\3\0\13\3\1\147\2\0\30\3\15\0"+
    "\2\3\3\0\2\3\1\150\11\3\2\0\4\3\1\63"+
    "\23\3\15\0\2\3\3\0\3\3\1\151\1\152\7\3"+
    "\2\0\1\3\1\117\26\3\15\0\2\3\3\0\2\3"+
    "\1\153\3\3\1\154\5\3\2\0\30\3\15\0\2\3"+
    "\3\0\14\3\2\0\2\3\1\155\25\3\15\0\2\3"+
    "\3\0\6\3\1\156\2\3\1\157\2\3\2\0\30\3"+
    "\15\0\2\3\3\0\14\3\2\0\1\160\27\3\15\0"+
    "\2\3\3\0\10\3\1\161\3\3\2\0\30\3\15\0"+
    "\2\3\3\0\14\3\2\0\1\3\1\162\26\3\15\0"+
    "\2\3\3\0\4\3\1\163\1\164\6\3\2\0\1\3"+
    "\1\165\26\3\15\0\2\3\3\0\14\3\2\0\1\3"+
    "\1\117\26\3\15\0\2\3\3\0\1\3\1\166\12\3"+
    "\2\0\30\3\15\0\2\3\3\0\10\3\1\167\3\3"+
    "\2\0\30\3\15\0\2\3\3\0\14\3\2\0\3\3"+
    "\1\170\24\3\15\0\2\3\3\0\2\3\1\171\11\3"+
    "\2\0\30\3\15\0\2\3\3\0\4\3\1\172\4\3"+
    "\1\146\2\3\2\0\30\3\15\0\2\3\3\0\4\3"+
    "\1\173\7\3\2\0\14\3\1\174\13\3\15\0\2\3"+
    "\3\0\12\3\1\175\1\3\2\0\30\3\15\0\2\3"+
    "\3\0\2\3\1\176\11\3\2\0\30\3\15\0\2\3"+
    "\3\0\11\3\1\177\2\3\2\0\30\3\15\0\2\3"+
    "\3\0\7\3\1\200\4\3\2\0\30\3\15\0\2\3"+
    "\3\0\14\3\2\0\10\3\1\63\17\3\15\0\2\3"+
    "\3\0\12\3\1\201\1\3\2\0\30\3\15\0\2\3"+
    "\3\0\5\3\1\202\6\3\2\0\7\3\1\203\20\3"+
    "\15\0\2\3\3\0\12\3\1\204\1\3\2\0\30\3"+
    "\15\0\2\3\3\0\12\3\1\63\1\3\2\0\30\3"+
    "\15\0\2\3\3\0\13\3\1\205\2\0\30\3\15\0"+
    "\2\3\3\0\14\3\2\0\2\3\1\206\25\3\15\0"+
    "\2\3\3\0\14\3\2\0\2\3\1\207\25\3\15\0"+
    "\2\3\3\0\11\3\1\210\2\3\2\0\30\3\15\0"+
    "\2\3\3\0\6\3\1\211\5\3\2\0\30\3\15\0"+
    "\2\3\3\0\4\3\1\166\7\3\2\0\30\3\15\0"+
    "\2\3\3\0\13\3\1\212\2\0\30\3\15\0\2\3"+
    "\3\0\4\3\1\213\7\3\2\0\30\3\15\0\2\3"+
    "\3\0\6\3\1\214\5\3\2\0\30\3\15\0\2\3"+
    "\3\0\6\3\1\215\5\3\2\0\30\3\15\0\2\3"+
    "\3\0\13\3\1\216\2\0\30\3\15\0\2\3\3\0"+
    "\14\3\2\0\23\3\1\217\4\3\15\0\2\3\3\0"+
    "\14\3\2\0\26\3\1\220\1\3\15\0\2\3\3\0"+
    "\14\3\2\0\1\3\1\221\26\3\14\0\5\141\1\222"+
    "\62\141\4\0\1\5\1\142\63\0\2\3\3\0\2\3"+
    "\1\223\11\3\2\0\30\3\15\0\2\3\3\0\2\3"+
    "\1\224\11\3\2\0\30\3\15\0\2\3\3\0\4\3"+
    "\1\225\7\3\2\0\30\3\15\0\2\3\3\0\4\3"+
    "\1\201\7\3\2\0\30\3\15\0\2\3\3\0\6\3"+
    "\1\113\5\3\2\0\30\3\15\0\2\3\3\0\11\3"+
    "\1\226\2\3\2\0\30\3\15\0\2\3\3\0\3\3"+
    "\1\227\10\3\2\0\30\3\15\0\2\3\3\0\5\3"+
    "\1\230\6\3\2\0\30\3\15\0\2\3\3\0\14\3"+
    "\2\0\1\3\1\231\26\3\15\0\2\3\3\0\14\3"+
    "\2\0\2\3\1\117\25\3\15\0\2\3\3\0\4\3"+
    "\1\232\7\3\2\0\1\3\1\226\26\3\15\0\2\3"+
    "\3\0\4\3\1\233\7\3\2\0\30\3\15\0\2\3"+
    "\3\0\14\3\2\0\2\3\1\63\6\3\1\234\16\3"+
    "\15\0\2\3\3\0\3\3\1\235\10\3\2\0\30\3"+
    "\15\0\2\3\3\0\3\3\1\236\10\3\2\0\30\3"+
    "\15\0\2\3\3\0\12\3\1\146\1\3\2\0\30\3"+
    "\15\0\2\3\3\0\12\3\1\237\1\3\2\0\30\3"+
    "\15\0\2\3\3\0\3\3\1\240\10\3\2\0\30\3"+
    "\15\0\2\3\3\0\4\3\1\241\7\3\2\0\30\3"+
    "\15\0\2\3\3\0\6\3\1\63\5\3\2\0\30\3"+
    "\15\0\2\3\3\0\4\3\1\224\7\3\2\0\30\3"+
    "\15\0\2\3\3\0\11\3\1\242\2\3\2\0\1\3"+
    "\1\243\1\3\1\244\3\3\1\245\1\31\17\3\15\0"+
    "\2\3\3\0\3\3\1\201\10\3\2\0\30\3\15\0"+
    "\2\3\3\0\12\3\1\246\1\3\2\0\30\3\15\0"+
    "\2\3\3\0\14\3\2\0\6\3\1\247\21\3\15\0"+
    "\2\3\3\0\14\3\2\0\6\3\1\250\21\3\15\0"+
    "\2\3\3\0\2\3\1\251\11\3\2\0\30\3\15\0"+
    "\2\3\3\0\4\3\1\235\7\3\2\0\30\3\15\0"+
    "\2\3\3\0\4\3\1\152\7\3\2\0\30\3\15\0"+
    "\2\3\3\0\12\3\1\252\1\3\2\0\30\3\15\0"+
    "\2\3\3\0\14\3\1\253\1\0\30\3\15\0\2\3"+
    "\3\0\3\3\1\254\10\3\2\0\30\3\15\0\2\3"+
    "\3\0\2\3\1\255\11\3\2\0\30\3\15\0\2\3"+
    "\3\0\3\3\1\64\10\3\2\0\30\3\15\0\2\3"+
    "\3\0\1\10\1\3\1\11\1\12\1\13\1\14\1\15"+
    "\1\3\1\16\1\17\1\256\1\21\2\0\1\22\1\23"+
    "\1\24\1\25\1\26\1\3\1\27\1\30\1\31\1\3"+
    "\1\32\1\33\14\3\15\0\2\3\3\0\2\3\1\257"+
    "\11\3\2\0\30\3\15\0\2\3\3\0\5\3\1\260"+
    "\6\3\2\0\30\3\15\0\2\3\3\0\3\3\1\117"+
    "\10\3\2\0\30\3\15\0\2\3\3\0\14\3\2\0"+
    "\1\261\27\3\15\0\2\3\3\0\11\3\1\262\2\3"+
    "\2\0\30\3\15\0\2\3\3\0\12\3\1\263\1\3"+
    "\2\0\30\3\15\0\2\3\3\0\2\3\1\264\11\3"+
    "\2\0\30\3\15\0\2\3\3\0\3\3\1\265\10\3"+
    "\2\0\30\3\15\0\2\3\3\0\2\3\1\266\11\3"+
    "\2\0\30\3\15\0\2\3\3\0\12\3\1\267\1\3"+
    "\2\0\30\3\15\0\2\3\3\0\14\3\2\0\26\3"+
    "\1\270\1\3\15\0\2\3\3\0\6\3\1\271\5\3"+
    "\2\0\30\3\14\0\4\141\1\5\1\222\62\141\1\0"+
    "\2\3\3\0\3\3\1\272\10\3\2\0\30\3\15\0"+
    "\2\3\3\0\14\3\2\0\4\3\1\201\23\3\15\0"+
    "\2\3\3\0\13\3\1\273\2\0\30\3\15\0\2\3"+
    "\3\0\4\3\1\63\7\3\2\0\30\3\15\0\2\3"+
    "\3\0\2\3\1\274\11\3\2\0\30\3\15\0\2\3"+
    "\3\0\1\3\1\63\12\3\2\0\30\3\15\0\2\3"+
    "\3\0\14\3\2\0\1\3\1\63\26\3\15\0\2\3"+
    "\3\0\11\3\1\275\2\3\2\0\30\3\15\0\2\3"+
    "\3\0\12\3\1\276\1\3\2\0\30\3\15\0\2\3"+
    "\3\0\2\3\1\277\11\3\2\0\30\3\15\0\2\3"+
    "\3\0\11\3\1\300\2\3\2\0\30\3\15\0\2\3"+
    "\3\0\12\3\1\301\1\3\2\0\30\3\15\0\2\3"+
    "\3\0\13\3\1\302\2\0\30\3\15\0\2\3\3\0"+
    "\14\3\2\0\6\3\1\303\21\3\15\0\2\3\3\0"+
    "\2\3\1\304\7\3\1\305\1\3\2\0\30\3\15\0"+
    "\2\3\3\0\14\3\2\0\7\3\1\63\20\3\15\0"+
    "\2\3\3\0\14\3\2\0\10\3\1\111\17\3\15\0"+
    "\2\3\3\0\12\3\1\306\1\3\2\0\30\3\15\0"+
    "\2\3\3\0\6\3\1\120\5\3\2\0\30\3\15\0"+
    "\2\3\3\0\14\3\2\0\2\3\1\307\25\3\15\0"+
    "\2\3\3\0\13\3\1\310\2\0\30\3\15\0\2\3"+
    "\3\0\11\3\1\311\2\3\2\0\30\3\15\0\2\3"+
    "\3\0\14\3\2\0\5\3\1\63\22\3\15\0\2\3"+
    "\3\0\14\3\2\0\1\3\1\312\26\3\37\0\1\313"+
    "\45\0\2\3\3\0\2\3\1\314\11\3\2\0\30\3"+
    "\15\0\2\3\3\0\14\3\2\0\6\3\1\315\21\3"+
    "\15\0\2\3\3\0\2\3\1\152\1\100\1\3\1\101"+
    "\1\3\1\102\4\3\2\0\2\3\1\103\6\3\1\104"+
    "\1\105\15\3\15\0\2\3\3\0\3\3\1\316\10\3"+
    "\2\0\30\3\15\0\2\3\3\0\4\3\1\317\7\3"+
    "\2\0\30\3\15\0\2\3\3\0\2\3\1\320\11\3"+
    "\2\0\30\3\15\0\2\3\3\0\14\3\2\0\2\3"+
    "\1\321\25\3\15\0\2\3\3\0\14\3\2\0\13\3"+
    "\1\322\14\3\15\0\2\3\3\0\4\3\1\270\7\3"+
    "\2\0\30\3\15\0\2\3\3\0\12\3\1\323\1\3"+
    "\2\0\30\3\15\0\2\3\3\0\14\3\2\0\4\3"+
    "\1\270\23\3\15\0\2\3\3\0\5\3\1\264\6\3"+
    "\2\0\30\3\15\0\2\3\3\0\14\3\2\0\15\3"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\3\1\42"+
    "\2\3\1\43\15\0\2\3\3\0\14\3\2\0\6\3"+
    "\1\324\21\3\15\0\2\3\3\0\4\3\1\325\7\3"+
    "\2\0\30\3\15\0\2\3\3\0\2\3\1\326\11\3"+
    "\2\0\30\3\15\0\2\3\3\0\14\3\2\0\1\210"+
    "\27\3\15\0\2\3\3\0\14\3\2\0\2\3\1\327"+
    "\25\3\15\0\2\3\3\0\5\3\1\330\6\3\2\0"+
    "\30\3\15\0\2\3\3\0\4\3\1\117\7\3\2\0"+
    "\30\3\15\0\2\3\3\0\5\3\1\63\6\3\2\0"+
    "\30\3\15\0\2\3\3\0\7\3\1\331\4\3\2\0"+
    "\30\3\15\0\2\3\3\0\14\3\2\0\7\3\1\332"+
    "\20\3\15\0\2\3\3\0\14\3\2\0\3\3\1\333"+
    "\24\3\15\0\2\3\3\0\14\3\2\0\2\3\1\334"+
    "\25\3\15\0\2\3\3\0\2\3\1\335\11\3\2\0"+
    "\30\3\15\0\2\3\3\0\5\3\1\202\6\3\2\0"+
    "\30\3\15\0\2\3\3\0\14\3\2\0\3\3\1\231"+
    "\24\3\15\0\2\3\3\0\14\3\2\0\2\3\1\63"+
    "\25\3\15\0\2\3\3\0\13\3\1\333\2\0\30\3"+
    "\15\0\2\3\3\0\10\3\1\332\3\3\2\0\30\3"+
    "\22\0\1\336\1\0\1\337\1\340\1\341\1\342\1\343"+
    "\1\0\1\344\1\345\1\346\1\347\2\0\1\350\1\351"+
    "\1\352\1\353\1\354\1\0\1\355\1\356\1\357\1\0"+
    "\1\360\1\361\31\0\2\3\3\0\13\3\1\117\2\0"+
    "\30\3\15\0\2\3\3\0\3\3\1\226\10\3\2\0"+
    "\30\3\15\0\2\3\3\0\1\10\1\3\1\11\1\362"+
    "\1\13\1\14\1\15\1\3\1\16\1\17\1\20\1\21"+
    "\2\0\1\22\1\23\1\24\1\25\1\26\1\3\1\27"+
    "\1\30\1\31\1\3\1\32\1\33\14\3\15\0\2\3"+
    "\3\0\11\3\1\363\2\3\2\0\30\3\15\0\2\3"+
    "\3\0\3\3\1\63\10\3\2\0\30\3\15\0\2\3"+
    "\3\0\14\3\2\0\13\3\1\270\14\3\15\0\2\3"+
    "\3\0\12\3\1\364\1\3\2\0\30\3\15\0\2\3"+
    "\3\0\2\3\1\365\11\3\2\0\30\3\15\0\2\3"+
    "\3\0\13\3\1\366\2\0\30\3\15\0\2\3\3\0"+
    "\1\367\13\3\2\0\30\3\15\0\2\3\3\0\5\3"+
    "\1\226\6\3\2\0\30\3\15\0\2\3\3\0\14\3"+
    "\2\0\6\3\1\117\21\3\15\0\2\3\3\0\4\3"+
    "\1\370\7\3\2\0\30\3\15\0\2\3\3\0\12\3"+
    "\1\371\1\3\2\0\30\3\15\0\2\3\3\0\2\3"+
    "\1\372\11\3\2\0\30\3\15\0\2\3\3\0\12\3"+
    "\1\373\1\3\2\0\30\3\15\0\2\3\3\0\5\3"+
    "\1\374\6\3\2\0\30\3\15\0\2\3\3\0\14\3"+
    "\2\0\3\3\1\375\24\3\22\0\1\376\102\0\1\377"+
    "\2\0\1\u0100\1\313\1\u0101\60\0\1\u0102\57\0\1\u0103"+
    "\11\0\1\u0104\56\0\1\u0105\1\u0106\2\0\1\u0107\74\0"+
    "\1\313\67\0\1\u0108\10\0\1\u0109\52\0\1\u010a\7\0"+
    "\1\u010b\1\u010c\4\0\1\313\45\0\1\u010d\1\0\1\u010e"+
    "\1\0\1\u010f\10\0\1\u0110\6\0\1\u0111\1\u0112\51\0"+
    "\1\u0113\70\0\1\u0114\60\0\1\u0115\21\0\1\u0116\43\0"+
    "\1\u0117\7\0\1\u0118\63\0\1\313\2\0\1\u0119\1\u011a"+
    "\66\0\1\u011b\75\0\1\u011c\1\u010b\55\0\1\u011d\2\0"+
    "\1\u011e\12\0\1\u011f\44\0\1\u0120\74\0\1\343\64\0"+
    "\1\u0121\2\0\1\u0122\54\0\2\3\3\0\11\3\1\65"+
    "\2\3\2\0\4\3\1\63\23\3\15\0\2\3\3\0"+
    "\6\3\1\310\5\3\2\0\30\3\15\0\2\3\3\0"+
    "\13\3\1\270\2\0\30\3\15\0\2\3\3\0\14\3"+
    "\2\0\2\3\1\270\25\3\15\0\2\3\3\0\5\3"+
    "\1\u0123\6\3\2\0\30\3\15\0\2\3\3\0\5\3"+
    "\1\u0124\6\3\2\0\30\3\15\0\2\3\3\0\12\3"+
    "\1\64\1\3\2\0\30\3\15\0\2\3\3\0\14\3"+
    "\2\0\2\3\1\u0125\25\3\15\0\2\3\3\0\5\3"+
    "\1\117\6\3\2\0\30\3\15\0\2\3\3\0\1\u0126"+
    "\1\3\1\11\1\12\1\13\1\14\1\15\1\3\1\16"+
    "\1\17\1\20\1\21\2\0\1\22\1\23\1\24\1\25"+
    "\1\26\1\3\1\27\1\30\1\31\1\3\1\32\1\33"+
    "\14\3\15\0\2\3\3\0\12\3\1\375\1\3\2\0"+
    "\30\3\15\0\2\3\3\0\6\3\1\242\5\3\2\0"+
    "\30\3\23\0\1\u0127\101\0\1\u0128\73\0\1\u0129\71\0"+
    "\1\313\65\0\1\u012a\63\0\1\u012b\56\0\1\u012c\17\0"+
    "\1\313\50\0\1\u012d\1\u012e\12\0\1\u011c\52\0\1\u012f"+
    "\3\0\1\u0130\101\0\1\u0131\55\0\1\u0132\2\0\1\u0133"+
    "\74\0\1\u0134\61\0\1\u0135\76\0\1\u0136\54\0\1\u0137"+
    "\1\u0138\11\0\1\u0139\67\0\1\u011c\51\0\1\u013a\76\0"+
    "\1\u013b\100\0\1\u013c\50\0\1\u013d\71\0\1\u013e\4\0"+
    "\1\u012a\62\0\1\u013f\25\0\1\u0140\47\0\1\u0141\57\0"+
    "\1\u0142\76\0\1\u0143\65\0\1\u0144\106\0\1\313\53\0"+
    "\1\u0145\62\0\1\u0146\17\0\1\u0147\54\0\1\u0148\67\0"+
    "\1\313\70\0\1\u0149\74\0\1\u014a\67\0\1\u014b\60\0"+
    "\1\u014c\64\0\1\u014d\65\0\1\u013a\56\0\2\3\3\0"+
    "\12\3\1\270\1\3\2\0\30\3\15\0\2\3\3\0"+
    "\6\3\1\u014e\5\3\2\0\30\3\15\0\2\3\3\0"+
    "\4\3\1\231\7\3\2\0\30\3\15\0\2\3\3\0"+
    "\1\60\5\3\1\u014f\5\3\2\0\30\3\24\0\1\u0150"+
    "\67\0\1\u0151\71\0\1\u0152\67\0\1\u0145\71\0\1\u0118"+
    "\72\0\1\u0153\61\0\1\u0154\71\0\1\u0155\101\0\1\u0156"+
    "\70\0\1\u011c\53\0\1\u0157\12\0\1\u0153\54\0\1\u0158"+
    "\103\0\1\313\6\0\1\u0159\43\0\1\u015a\67\0\1\u015b"+
    "\76\0\1\u012a\67\0\1\u015c\60\0\1\u015d\70\0\1\u015e"+
    "\71\0\1\313\65\0\1\u0151\74\0\1\u015f\5\0\1\u0160"+
    "\1\0\1\u0161\3\0\1\u0162\1\357\44\0\1\u0145\76\0"+
    "\1\u0163\101\0\1\u0164\67\0\1\u0165\45\0\1\u0166\71\0"+
    "\1\u015a\67\0\1\u012e\75\0\1\u0167\71\0\1\253\56\0"+
    "\1\u0168\66\0\1\u0169\70\0\1\u0101\64\0\1\336\1\0"+
    "\1\337\1\340\1\341\1\342\1\343\1\0\1\344\1\345"+
    "\1\u016a\1\347\2\0\1\350\1\351\1\352\1\353\1\354"+
    "\1\0\1\355\1\356\1\357\1\0\1\360\1\361\40\0"+
    "\1\u016b\72\0\1\u016c\65\0\1\u011c\102\0\1\u016d\44\0"+
    "\2\3\3\0\7\3\1\u016e\4\3\2\0\30\3\15\0"+
    "\2\3\3\0\14\3\2\0\2\3\1\372\25\3\25\0"+
    "\1\u016f\106\0\1\u0145\60\0\1\u0170\60\0\1\313\65\0"+
    "\1\u0171\66\0\1\313\105\0\1\313\61\0\1\u0172\70\0"+
    "\1\u0173\57\0\1\u0174\76\0\1\u0175\70\0\1\u0176\70\0"+
    "\1\u0177\100\0\1\u0178\45\0\1\u0179\7\0\1\u017a\102\0"+
    "\1\313\70\0\1\u0116\53\0\1\u017b\63\0\1\u011d\101\0"+
    "\1\u017c\62\0\1\u017d\65\0\1\u017e\101\0\1\313\63\0"+
    "\1\u017f\52\0\1\u0180\111\0\1\u0181\45\0\1\u012e\1\u010d"+
    "\1\0\1\u010e\1\0\1\u010f\10\0\1\u0110\6\0\1\u0111"+
    "\1\u0112\42\0\1\u0182\70\0\1\u0183\65\0\1\u0184\60\0"+
    "\2\3\3\0\10\3\1\u0185\3\3\2\0\30\3\26\0"+
    "\1\u0186\65\0\1\u0187\103\0\1\u014c\71\0\1\u0188\54\0"+
    "\1\u0189\66\0\1\u011c\70\0\1\313\71\0\1\u018a\105\0"+
    "\1\u018b\63\0\1\u018c\66\0\1\u018d\51\0\1\u018e\72\0"+
    "\1\u0146\103\0\1\u0156\66\0\1\313\62\0\1\u018c\64\0"+
    "\1\u018b\72\0\1\u011c\57\0\1\u0153\64\0\1\336\1\0"+
    "\1\337\1\u018f\1\341\1\342\1\343\1\0\1\344\1\345"+
    "\1\346\1\347\2\0\1\350\1\351\1\352\1\353\1\354"+
    "\1\0\1\355\1\356\1\357\1\0\1\360\1\361\47\0"+
    "\1\u0190\61\0\1\313\57\0\2\3\3\0\11\3\1\u0191"+
    "\2\3\2\0\30\3\22\0\1\u0192\74\0\1\u0153\106\0"+
    "\1\u011c\47\0\1\u0193\75\0\1\u0194\57\0\1\u0195\77\0"+
    "\1\u0196\62\0\1\u0197\103\0\1\u0198\57\0\1\u0102\10\0"+
    "\1\313\53\0\1\u017d\54\0\2\3\3\0\3\3\1\u0199"+
    "\10\3\2\0\30\3\27\0\1\u019a\74\0\1\u0101\75\0"+
    "\1\u019b\54\0\1\u011c\62\0\1\u019c\1\0\1\337\1\340"+
    "\1\341\1\342\1\343\1\0\1\344\1\345\1\346\1\347"+
    "\2\0\1\350\1\351\1\352\1\353\1\354\1\0\1\355"+
    "\1\356\1\357\1\0\1\360\1\361\50\0\1\u0198\63\0"+
    "\1\u015f\54\0\2\3\3\0\12\3\1\u019d\1\3\2\0"+
    "\30\3\30\0\1\u019e\65\0\1\u0156\63\0\1\376\5\0"+
    "\1\u019f\54\0\2\3\3\0\13\3\1\201\2\0\30\3"+
    "\31\0\1\u01a0\100\0\1\u0195\57\0\1\u01a1\70\0\1\u01a2"+
    "\61\0\1\u01a3\76\0\1\u01a4\70\0\1\u0145\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22848];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\35\1\1\11"+
    "\2\1\1\11\2\1\3\11\1\1\1\0\56\1\3\11"+
    "\2\0\57\1\1\0\30\1\1\0\62\1\24\0\14\1"+
    "\45\0\4\1\42\0\1\1\4\0\2\1\36\0\1\1"+
    "\23\0\1\1\2\0\1\1\13\0\1\1\4\0\1\1"+
    "\2\0\1\1\3\0\1\1\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[420];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 20: break;
          case 2: 
            { lexeme=yytext(); return ID;
            }
          case 21: break;
          case 3: 
            { lexeme=yytext(); return INT;
            }
          case 22: break;
          case 4: 
            { /*Ignore*/
            }
          case 23: break;
          case 5: 
            { return DIVIDED;
            }
          case 24: break;
          case 6: 
            { return MULTIPLE;
            }
          case 25: break;
          case 7: 
            { return MINUS;
            }
          case 26: break;
          case 8: 
            { return VAR;
            }
          case 27: break;
          case 9: 
            { return ASSIGN;
            }
          case 28: break;
          case 10: 
            { return PLUS;
            }
          case 29: break;
          case 11: 
            { return NOT;
            }
          case 30: break;
          case 12: 
            { return COMMA;
            }
          case 31: break;
          case 13: 
            { return SEMICOLON;
            }
          case 32: break;
          case 14: 
            { return DOUBLE_QUOTE;
            }
          case 33: break;
          case 15: 
            { lexeme=yytext(); return RESERVED;
            }
          case 34: break;
          case 16: 
            { return EQUALS;
            }
          case 35: break;
          case 17: 
            { return AND;
            }
          case 36: break;
          case 18: 
            { return OR;
            }
          case 37: break;
          case 19: 
            { lexeme=yytext(); return TYPE;
            }
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
