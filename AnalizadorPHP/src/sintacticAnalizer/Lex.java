package sintacticAnalizer;

/* The following code was generated by JFlex 1.6.1 */

/*IMPORTACIONES*/
import static sintacticAnalizer.Token.*;

//DEFINICIONES

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/diego/Documents/NetBeansProjects/AnalizadorPHP/AnalizadorPHP/src/sintacticAnalizer/Lexer.flex</tt>
 */
class Lex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\65\1\66\1\66\1\65\22\0\1\3\1\62\1\71"+
    "\1\0\1\57\1\0\1\63\1\0\1\24\1\25\1\5\1\61\1\67"+
    "\1\56\1\0\1\4\12\2\1\0\1\70\1\6\1\60\1\0\1\7"+
    "\1\0\1\47\1\46\3\1\1\45\2\1\1\44\2\1\1\54\1\1"+
    "\1\52\1\50\2\1\1\55\1\43\1\1\1\53\5\1\4\0\1\12"+
    "\1\0\1\13\1\26\1\16\1\31\1\22\1\35\1\41\1\11\1\21"+
    "\1\51\1\33\1\14\1\20\1\30\1\17\1\10\1\42\1\23\1\27"+
    "\1\15\1\34\1\37\1\36\1\40\1\32\1\1\1\0\1\64\10\0"+
    "\1\66\u1fa2\0\1\66\1\66\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\34\2\1\7\1\10\1\11\1\12\1\13\2\1\1\14"+
    "\1\15\1\16\1\4\2\0\5\2\1\17\50\2\1\20"+
    "\1\21\1\22\3\0\6\2\1\0\34\2\1\17\14\2"+
    "\2\0\30\2\1\0\14\2\1\23\1\2\1\17\23\2"+
    "\1\17\6\2\24\0\16\2\45\0\4\2\1\17\3\2"+
    "\42\0\1\17\4\0\3\2\36\0\2\2\23\0\1\17"+
    "\2\0\1\2\13\0\1\2\4\0\1\17\2\0\1\2"+
    "\3\0\1\2\2\0\1\2\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\72\0\350\0\72\0\u0122"+
    "\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\u0706\0\u0740\0\u077a\0\256\0\72\0\u07b4\0\256"+
    "\0\72\0\u07ee\0\u0828\0\72\0\72\0\72\0\u0862\0\u089c"+
    "\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c"+
    "\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c"+
    "\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc"+
    "\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac"+
    "\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\72"+
    "\0\72\0\72\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e"+
    "\0\u14d8\0\u1512\0\u154c\0\u0122\0\u1586\0\u15c0\0\u15fa\0\u1634"+
    "\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804"+
    "\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4"+
    "\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4"+
    "\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74"+
    "\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44"+
    "\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114"+
    "\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4"+
    "\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4"+
    "\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684"+
    "\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854"+
    "\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24"+
    "\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4"+
    "\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4"+
    "\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94"+
    "\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164"+
    "\0\u319e\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334"+
    "\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504"+
    "\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4"+
    "\0\u370e\0\u3748\0\u3782\0\u37bc\0\u37f6\0\u3830\0\u386a\0\u38a4"+
    "\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6\0\u3a00\0\u3a3a\0\u3a74"+
    "\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44"+
    "\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14"+
    "\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\u3fe4"+
    "\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106\0\u4140\0\u417a\0\u41b4"+
    "\0\u41ee\0\u4228\0\u4262\0\u429c\0\u42d6\0\u4310\0\u434a\0\u4384"+
    "\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0\0\u451a\0\u4554"+
    "\0\u458e\0\u45c8\0\u4602\0\u463c\0\u4676\0\u46b0\0\u46ea\0\u4724"+
    "\0\u475e\0\u4798\0\u47d2\0\u480c\0\u4846\0\u4880\0\u48ba\0\u48f4"+
    "\0\u492e\0\u4968\0\u49a2\0\u49dc\0\u4a16\0\u4a50\0\u4a8a\0\u4ac4"+
    "\0\u4afe\0\u4b38\0\u4b72\0\u4bac\0\u4be6\0\u4c20\0\u4c5a\0\u4c94"+
    "\0\u4cce\0\u4d08\0\u4d42\0\u4d7c\0\u4db6\0\u4df0\0\u4e2a\0\u4e64"+
    "\0\u4e9e\0\u4ed8\0\u4f12\0\u4f4c\0\u4f86\0\u4fc0\0\u4ffa\0\u5034"+
    "\0\u506e\0\u50a8\0\u50e2\0\u511c\0\u5156\0\u5190\0\u51ca\0\u5204"+
    "\0\u523e\0\u5278\0\u52b2\0\u52ec\0\u5326\0\u5360\0\u539a\0\u53d4"+
    "\0\u540e\0\u5448\0\u5482\0\u54bc\0\u54f6\0\u5530\0\u556a\0\u55a4"+
    "\0\u55de\0\u5618\0\u5652\0\u568c\0\u56c6\0\u5700\0\u573a\0\u5774"+
    "\0\u57ae\0\u57e8\0\u5822\0\u585c\0\u5896\0\u58d0\0\u590a\0\u5944"+
    "\0\u597e\0\u59b8\0\u59f2\0\u5a2c\0\u5a66\0\u5aa0\0\u5ada\0\u5b14"+
    "\0\u5b4e\0\u5b88\0\u5bc2\0\u5bfc\0\u5c36\0\u5c70\0\u5caa\0\u5ce4"+
    "\0\u5d1e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\3\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\3\1\20\1\21\1\22\2\2\1\23\1\24\1\25"+
    "\1\26\1\27\1\3\1\30\1\31\1\32\1\3\1\33"+
    "\1\34\1\3\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\3\1\43\2\3\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\5\1\0\1\54\1\55\1\56"+
    "\73\0\2\3\5\0\14\3\2\0\30\3\16\0\1\4"+
    "\73\0\1\57\1\60\73\0\1\61\63\0\2\3\5\0"+
    "\13\3\1\62\2\0\6\3\1\63\21\3\15\0\2\3"+
    "\5\0\2\3\1\64\11\3\2\0\30\3\15\0\2\3"+
    "\5\0\13\3\1\65\2\0\1\66\1\67\1\70\25\3"+
    "\15\0\2\3\5\0\11\3\1\71\2\3\2\0\30\3"+
    "\15\0\2\3\5\0\1\3\1\72\11\3\1\73\2\0"+
    "\30\3\15\0\2\3\5\0\3\3\1\74\1\75\2\3"+
    "\1\76\4\3\2\0\30\3\15\0\2\3\5\0\13\3"+
    "\1\67\2\0\30\3\15\0\2\3\5\0\10\3\1\77"+
    "\3\3\2\0\1\3\1\100\1\101\4\3\1\67\20\3"+
    "\15\0\2\3\5\0\4\3\1\102\1\3\1\103\1\3"+
    "\1\104\3\3\2\0\2\3\1\105\6\3\1\106\1\107"+
    "\15\3\15\0\2\3\5\0\12\3\1\110\1\3\2\0"+
    "\30\3\15\0\2\3\5\0\13\3\1\111\2\0\30\3"+
    "\15\0\2\3\5\0\5\3\1\112\6\3\2\0\10\3"+
    "\1\113\17\3\15\0\2\3\5\0\3\3\1\114\6\3"+
    "\1\115\1\3\2\0\30\3\15\0\2\3\5\0\7\3"+
    "\1\67\1\3\1\116\1\117\1\3\2\0\30\3\15\0"+
    "\2\3\5\0\11\3\1\120\2\3\2\0\30\3\15\0"+
    "\2\3\5\0\14\3\2\0\1\3\1\121\1\100\25\3"+
    "\15\0\2\3\5\0\7\3\1\122\1\3\1\123\2\3"+
    "\2\0\6\3\1\124\21\3\15\0\2\3\5\0\1\3"+
    "\1\125\12\3\2\0\30\3\15\0\2\3\5\0\7\3"+
    "\1\17\4\3\2\0\30\3\15\0\2\3\5\0\4\3"+
    "\1\126\2\3\1\127\4\3\2\0\30\3\15\0\2\3"+
    "\5\0\5\3\1\130\6\3\2\0\30\3\15\0\2\3"+
    "\5\0\14\3\2\0\2\3\1\131\25\3\15\0\2\3"+
    "\5\0\4\3\1\132\7\3\2\0\30\3\15\0\2\3"+
    "\5\0\7\3\1\133\4\3\2\0\30\3\15\0\2\3"+
    "\5\0\13\3\1\134\2\0\30\3\15\0\2\3\5\0"+
    "\14\3\2\0\1\135\27\3\15\0\2\3\5\0\14\3"+
    "\2\0\25\3\1\136\2\3\15\0\2\3\5\0\12\3"+
    "\1\137\1\3\2\0\30\3\74\0\1\140\74\0\1\141"+
    "\72\0\1\142\5\0\65\57\2\0\3\57\5\143\1\144"+
    "\64\143\10\0\1\145\62\0\2\3\5\0\7\3\1\146"+
    "\1\3\1\147\2\3\2\0\30\3\15\0\2\3\5\0"+
    "\14\3\2\0\1\150\27\3\15\0\2\3\5\0\1\3"+
    "\1\151\12\3\2\0\30\3\15\0\2\3\5\0\13\3"+
    "\1\152\2\0\30\3\15\0\2\3\5\0\14\3\2\0"+
    "\1\3\1\153\26\3\15\0\2\3\3\0\1\154\1\0"+
    "\1\11\1\3\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\3\1\20\1\21\1\22\2\0\1\23\1\24\1\25"+
    "\1\26\1\27\1\3\1\30\1\31\1\32\1\3\1\33"+
    "\1\34\14\3\15\0\2\3\5\0\14\3\2\0\3\3"+
    "\1\67\24\3\15\0\2\3\5\0\14\3\2\0\1\3"+
    "\1\155\26\3\15\0\2\3\5\0\13\3\1\156\2\0"+
    "\30\3\15\0\2\3\5\0\3\3\1\157\10\3\2\0"+
    "\4\3\1\67\23\3\15\0\2\3\5\0\4\3\1\160"+
    "\1\161\6\3\2\0\1\3\1\121\26\3\15\0\2\3"+
    "\5\0\3\3\1\162\3\3\1\163\4\3\2\0\30\3"+
    "\15\0\2\3\5\0\14\3\2\0\2\3\1\164\25\3"+
    "\15\0\2\3\5\0\1\165\13\3\2\0\30\3\15\0"+
    "\2\3\5\0\14\3\2\0\1\3\1\166\26\3\15\0"+
    "\2\3\5\0\5\3\1\167\1\170\5\3\2\0\1\3"+
    "\1\171\26\3\15\0\2\3\5\0\14\3\2\0\1\3"+
    "\1\121\26\3\15\0\2\3\5\0\1\3\1\172\12\3"+
    "\2\0\30\3\15\0\2\3\5\0\1\173\13\3\2\0"+
    "\30\3\15\0\2\3\5\0\14\3\2\0\3\3\1\174"+
    "\24\3\15\0\2\3\5\0\3\3\1\175\10\3\2\0"+
    "\30\3\15\0\2\3\5\0\5\3\1\176\3\3\1\155"+
    "\2\3\2\0\30\3\15\0\2\3\5\0\5\3\1\177"+
    "\6\3\2\0\14\3\1\200\13\3\15\0\2\3\5\0"+
    "\12\3\1\201\1\3\2\0\30\3\15\0\2\3\5\0"+
    "\3\3\1\202\10\3\2\0\30\3\15\0\2\3\5\0"+
    "\11\3\1\203\2\3\2\0\30\3\15\0\2\3\5\0"+
    "\10\3\1\204\3\3\2\0\30\3\15\0\2\3\5\0"+
    "\14\3\2\0\10\3\1\67\17\3\15\0\2\3\5\0"+
    "\12\3\1\205\1\3\2\0\30\3\15\0\2\3\5\0"+
    "\6\3\1\206\5\3\2\0\7\3\1\207\20\3\15\0"+
    "\2\3\5\0\12\3\1\210\1\3\2\0\30\3\15\0"+
    "\2\3\5\0\12\3\1\67\1\3\2\0\30\3\15\0"+
    "\2\3\5\0\13\3\1\211\2\0\30\3\15\0\2\3"+
    "\5\0\14\3\2\0\2\3\1\212\25\3\15\0\2\3"+
    "\5\0\14\3\2\0\2\3\1\213\25\3\15\0\2\3"+
    "\5\0\11\3\1\214\2\3\2\0\30\3\15\0\2\3"+
    "\5\0\7\3\1\215\4\3\2\0\30\3\15\0\2\3"+
    "\5\0\5\3\1\172\6\3\2\0\30\3\15\0\2\3"+
    "\5\0\13\3\1\216\2\0\30\3\15\0\2\3\5\0"+
    "\5\3\1\217\6\3\2\0\30\3\15\0\2\3\5\0"+
    "\7\3\1\220\4\3\2\0\30\3\15\0\2\3\5\0"+
    "\7\3\1\221\4\3\2\0\30\3\15\0\2\3\5\0"+
    "\13\3\1\222\2\0\30\3\15\0\2\3\5\0\14\3"+
    "\2\0\23\3\1\223\4\3\15\0\2\3\5\0\14\3"+
    "\2\0\26\3\1\224\1\3\15\0\2\3\5\0\14\3"+
    "\2\0\1\3\1\225\26\3\14\0\5\143\1\226\64\143"+
    "\4\0\1\5\1\144\75\0\1\227\61\0\2\3\5\0"+
    "\5\3\1\230\6\3\2\0\30\3\15\0\2\3\5\0"+
    "\14\3\2\0\2\3\1\67\6\3\1\231\16\3\15\0"+
    "\2\3\5\0\4\3\1\232\7\3\2\0\30\3\15\0"+
    "\2\3\5\0\3\3\1\233\10\3\2\0\30\3\15\0"+
    "\2\3\5\0\3\3\1\234\10\3\2\0\30\3\15\0"+
    "\2\3\5\0\5\3\1\235\6\3\2\0\30\3\15\0"+
    "\2\3\5\0\5\3\1\205\6\3\2\0\30\3\15\0"+
    "\2\3\5\0\7\3\1\115\4\3\2\0\30\3\15\0"+
    "\2\3\5\0\11\3\1\236\2\3\2\0\30\3\15\0"+
    "\2\3\5\0\4\3\1\237\7\3\2\0\30\3\15\0"+
    "\2\3\5\0\6\3\1\240\5\3\2\0\30\3\15\0"+
    "\2\3\5\0\14\3\2\0\1\3\1\241\26\3\15\0"+
    "\2\3\5\0\14\3\2\0\2\3\1\121\25\3\15\0"+
    "\2\3\5\0\5\3\1\242\6\3\2\0\1\3\1\236"+
    "\26\3\15\0\2\3\5\0\4\3\1\243\7\3\2\0"+
    "\30\3\15\0\2\3\5\0\12\3\1\155\1\3\2\0"+
    "\30\3\15\0\2\3\5\0\12\3\1\244\1\3\2\0"+
    "\30\3\15\0\2\3\5\0\4\3\1\245\7\3\2\0"+
    "\30\3\15\0\2\3\5\0\5\3\1\246\6\3\2\0"+
    "\30\3\15\0\2\3\5\0\7\3\1\67\4\3\2\0"+
    "\30\3\15\0\2\3\5\0\5\3\1\234\6\3\2\0"+
    "\30\3\15\0\2\3\5\0\11\3\1\247\2\3\2\0"+
    "\1\3\1\250\1\3\1\251\3\3\1\252\1\32\17\3"+
    "\15\0\2\3\5\0\4\3\1\205\7\3\2\0\30\3"+
    "\15\0\2\3\5\0\12\3\1\253\1\3\2\0\30\3"+
    "\15\0\2\3\5\0\14\3\2\0\6\3\1\254\21\3"+
    "\15\0\2\3\5\0\14\3\2\0\6\3\1\255\21\3"+
    "\15\0\2\3\5\0\3\3\1\256\10\3\2\0\30\3"+
    "\15\0\2\3\5\0\5\3\1\232\6\3\2\0\30\3"+
    "\15\0\2\3\5\0\5\3\1\161\6\3\2\0\30\3"+
    "\15\0\2\3\5\0\12\3\1\257\1\3\2\0\30\3"+
    "\15\0\2\3\5\0\14\3\1\260\1\0\30\3\15\0"+
    "\2\3\5\0\4\3\1\261\7\3\2\0\30\3\15\0"+
    "\2\3\5\0\3\3\1\262\10\3\2\0\30\3\15\0"+
    "\2\3\5\0\4\3\1\70\7\3\2\0\30\3\15\0"+
    "\2\3\3\0\1\154\1\0\1\11\1\3\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\3\1\20\1\263\1\22"+
    "\2\0\1\23\1\24\1\25\1\26\1\27\1\3\1\30"+
    "\1\31\1\32\1\3\1\33\1\34\14\3\15\0\2\3"+
    "\5\0\3\3\1\264\10\3\2\0\30\3\15\0\2\3"+
    "\5\0\6\3\1\265\5\3\2\0\30\3\15\0\2\3"+
    "\5\0\4\3\1\121\7\3\2\0\30\3\15\0\2\3"+
    "\5\0\14\3\2\0\1\266\27\3\15\0\2\3\5\0"+
    "\11\3\1\267\2\3\2\0\30\3\15\0\2\3\5\0"+
    "\12\3\1\270\1\3\2\0\30\3\15\0\2\3\5\0"+
    "\3\3\1\271\10\3\2\0\30\3\15\0\2\3\5\0"+
    "\4\3\1\272\7\3\2\0\30\3\15\0\2\3\5\0"+
    "\3\3\1\273\10\3\2\0\30\3\15\0\2\3\5\0"+
    "\12\3\1\274\1\3\2\0\30\3\15\0\2\3\5\0"+
    "\14\3\2\0\26\3\1\275\1\3\15\0\2\3\5\0"+
    "\7\3\1\276\4\3\2\0\30\3\14\0\4\143\1\5"+
    "\1\226\64\143\10\0\1\277\62\0\2\3\5\0\12\3"+
    "\1\300\1\3\2\0\30\3\15\0\2\3\5\0\3\3"+
    "\1\301\10\3\2\0\30\3\15\0\2\3\5\0\11\3"+
    "\1\302\2\3\2\0\30\3\15\0\2\3\5\0\4\3"+
    "\1\303\7\3\2\0\30\3\15\0\2\3\5\0\14\3"+
    "\2\0\4\3\1\205\23\3\15\0\2\3\5\0\13\3"+
    "\1\304\2\0\30\3\15\0\2\3\5\0\5\3\1\67"+
    "\6\3\2\0\30\3\15\0\2\3\5\0\3\3\1\305"+
    "\10\3\2\0\30\3\15\0\2\3\5\0\1\3\1\67"+
    "\12\3\2\0\30\3\15\0\2\3\5\0\14\3\2\0"+
    "\1\3\1\67\26\3\15\0\2\3\5\0\11\3\1\306"+
    "\2\3\2\0\30\3\15\0\2\3\5\0\12\3\1\307"+
    "\1\3\2\0\30\3\15\0\2\3\5\0\13\3\1\310"+
    "\2\0\30\3\15\0\2\3\5\0\14\3\2\0\6\3"+
    "\1\311\21\3\15\0\2\3\5\0\3\3\1\312\6\3"+
    "\1\313\1\3\2\0\30\3\15\0\2\3\5\0\14\3"+
    "\2\0\7\3\1\67\20\3\15\0\2\3\5\0\14\3"+
    "\2\0\10\3\1\113\17\3\15\0\2\3\5\0\12\3"+
    "\1\314\1\3\2\0\30\3\15\0\2\3\5\0\7\3"+
    "\1\122\4\3\2\0\30\3\15\0\2\3\5\0\14\3"+
    "\2\0\2\3\1\315\25\3\15\0\2\3\5\0\13\3"+
    "\1\316\2\0\30\3\15\0\2\3\5\0\11\3\1\317"+
    "\2\3\2\0\30\3\15\0\2\3\5\0\14\3\2\0"+
    "\5\3\1\67\22\3\15\0\2\3\5\0\14\3\2\0"+
    "\1\3\1\320\26\3\41\0\1\277\45\0\2\3\5\0"+
    "\3\3\1\321\10\3\2\0\30\3\15\0\2\3\5\0"+
    "\14\3\2\0\6\3\1\322\21\3\15\0\2\3\5\0"+
    "\3\3\1\161\1\102\1\3\1\103\1\3\1\104\3\3"+
    "\2\0\2\3\1\105\6\3\1\106\1\107\15\3\15\0"+
    "\2\3\5\0\4\3\1\323\7\3\2\0\30\3\15\0"+
    "\2\3\5\0\5\3\1\324\6\3\2\0\30\3\15\0"+
    "\2\3\5\0\3\3\1\325\10\3\2\0\30\3\15\0"+
    "\2\3\5\0\14\3\2\0\2\3\1\326\25\3\15\0"+
    "\2\3\5\0\14\3\2\0\13\3\1\327\14\3\15\0"+
    "\2\3\5\0\5\3\1\275\6\3\2\0\30\3\15\0"+
    "\2\3\5\0\12\3\1\330\1\3\2\0\30\3\15\0"+
    "\2\3\5\0\14\3\2\0\4\3\1\275\23\3\15\0"+
    "\2\3\5\0\6\3\1\271\5\3\2\0\30\3\15\0"+
    "\2\3\5\0\14\3\2\0\15\3\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\3\1\43\2\3\1\44\15\0"+
    "\2\3\5\0\14\3\2\0\6\3\1\331\21\3\22\0"+
    "\1\154\1\0\1\332\1\0\1\333\1\334\1\335\1\336"+
    "\1\337\1\340\1\0\1\341\1\342\1\343\2\0\1\344"+
    "\1\345\1\346\1\347\1\350\1\0\1\351\1\352\1\353"+
    "\1\0\1\354\1\355\31\0\2\3\5\0\6\3\1\356"+
    "\5\3\2\0\30\3\15\0\2\3\5\0\5\3\1\121"+
    "\6\3\2\0\30\3\15\0\2\3\5\0\6\3\1\67"+
    "\5\3\2\0\30\3\15\0\2\3\5\0\5\3\1\357"+
    "\6\3\2\0\30\3\15\0\2\3\5\0\3\3\1\360"+
    "\10\3\2\0\30\3\15\0\2\3\5\0\14\3\2\0"+
    "\1\214\27\3\15\0\2\3\5\0\14\3\2\0\2\3"+
    "\1\361\25\3\15\0\2\3\5\0\10\3\1\362\3\3"+
    "\2\0\30\3\15\0\2\3\5\0\14\3\2\0\7\3"+
    "\1\363\20\3\15\0\2\3\5\0\14\3\2\0\3\3"+
    "\1\364\24\3\15\0\2\3\5\0\14\3\2\0\2\3"+
    "\1\365\25\3\15\0\2\3\5\0\3\3\1\366\10\3"+
    "\2\0\30\3\15\0\2\3\5\0\6\3\1\206\5\3"+
    "\2\0\30\3\15\0\2\3\5\0\14\3\2\0\3\3"+
    "\1\241\24\3\15\0\2\3\5\0\14\3\2\0\2\3"+
    "\1\67\25\3\15\0\2\3\5\0\13\3\1\364\2\0"+
    "\30\3\15\0\2\3\5\0\1\363\13\3\2\0\30\3"+
    "\15\0\2\3\5\0\13\3\1\121\2\0\30\3\15\0"+
    "\2\3\5\0\4\3\1\236\7\3\2\0\30\3\15\0"+
    "\2\3\3\0\1\154\1\0\1\11\1\3\1\12\1\13"+
    "\1\367\1\15\1\16\1\17\1\3\1\20\1\21\1\22"+
    "\2\0\1\23\1\24\1\25\1\26\1\27\1\3\1\30"+
    "\1\31\1\32\1\3\1\33\1\34\14\3\15\0\2\3"+
    "\5\0\11\3\1\370\2\3\2\0\30\3\15\0\2\3"+
    "\5\0\4\3\1\67\7\3\2\0\30\3\15\0\2\3"+
    "\5\0\14\3\2\0\13\3\1\275\14\3\15\0\2\3"+
    "\5\0\12\3\1\371\1\3\2\0\30\3\15\0\2\3"+
    "\5\0\3\3\1\372\10\3\2\0\30\3\15\0\2\3"+
    "\5\0\13\3\1\373\2\0\30\3\37\0\1\374\10\0"+
    "\1\375\47\0\1\376\102\0\1\377\2\0\1\u0100\1\277"+
    "\1\u0101\62\0\1\u0102\61\0\1\u0103\11\0\1\u0104\61\0"+
    "\1\u0105\1\u0106\2\0\1\u0107\75\0\1\277\66\0\1\u0108"+
    "\6\0\1\u0109\1\u010a\4\0\1\277\50\0\1\u010b\1\0"+
    "\1\u010c\1\0\1\u010d\7\0\1\u010e\6\0\1\u010f\1\u0110"+
    "\53\0\1\u0111\72\0\1\u0112\63\0\1\u0113\20\0\1\u0114"+
    "\46\0\1\u0115\6\0\1\u0116\66\0\1\277\1\0\1\u0117"+
    "\1\u0118\70\0\1\u0119\77\0\1\u011a\1\u0109\60\0\1\u011b"+
    "\1\0\1\u011c\12\0\1\u011d\46\0\1\u011e\77\0\1\340"+
    "\66\0\1\u011f\2\0\1\u0120\53\0\2\3\5\0\5\3"+
    "\1\u0121\6\3\2\0\30\3\15\0\2\3\5\0\2\3"+
    "\1\u0122\11\3\2\0\30\3\15\0\2\3\5\0\6\3"+
    "\1\236\5\3\2\0\30\3\15\0\2\3\5\0\14\3"+
    "\2\0\6\3\1\121\21\3\15\0\2\3\5\0\12\3"+
    "\1\u0123\1\3\2\0\30\3\15\0\2\3\5\0\3\3"+
    "\1\u0124\10\3\2\0\30\3\15\0\2\3\5\0\12\3"+
    "\1\u0125\1\3\2\0\30\3\15\0\2\3\5\0\6\3"+
    "\1\u0126\5\3\2\0\30\3\15\0\2\3\5\0\14\3"+
    "\2\0\3\3\1\u0127\24\3\15\0\2\3\5\0\11\3"+
    "\1\71\2\3\2\0\4\3\1\67\23\3\15\0\2\3"+
    "\5\0\7\3\1\316\4\3\2\0\30\3\15\0\2\3"+
    "\5\0\13\3\1\275\2\0\30\3\15\0\2\3\5\0"+
    "\14\3\2\0\2\3\1\275\25\3\15\0\2\3\5\0"+
    "\6\3\1\u0128\5\3\2\0\30\3\33\0\1\u0129\1\0"+
    "\1\u012a\76\0\1\u012b\54\0\1\u012c\103\0\1\u012d\75\0"+
    "\1\u012e\73\0\1\277\67\0\1\u012f\65\0\1\u0130\61\0"+
    "\1\u0131\16\0\1\277\53\0\1\u0132\1\u0133\11\0\1\u011a"+
    "\55\0\1\u0134\3\0\1\u0135\102\0\1\u0136\51\0\1\u0137"+
    "\110\0\1\u0138\57\0\1\u0139\1\u013a\10\0\1\u013b\71\0"+
    "\1\u011a\53\0\1\u013c\70\0\1\u013d\112\0\1\u013e\53\0"+
    "\1\u013f\73\0\1\u0140\3\0\1\u012f\65\0\1\u0141\24\0"+
    "\1\u0142\51\0\1\u0143\62\0\1\u0144\77\0\1\u0145\70\0"+
    "\1\u0146\107\0\1\277\55\0\1\u0147\65\0\1\u0148\16\0"+
    "\1\u0149\56\0\1\u014a\71\0\1\277\72\0\1\u014b\76\0"+
    "\1\u014c\71\0\1\u014d\62\0\1\u014e\67\0\1\u014f\67\0"+
    "\1\u013c\55\0\2\3\5\0\12\3\1\70\1\3\2\0"+
    "\30\3\15\0\2\3\5\0\6\3\1\u0150\5\3\2\0"+
    "\30\3\15\0\2\3\5\0\14\3\2\0\2\3\1\u0151"+
    "\25\3\15\0\2\3\5\0\6\3\1\121\5\3\2\0"+
    "\30\3\15\0\2\3\3\0\1\154\1\0\1\11\1\3"+
    "\1\u0152\1\13\1\14\1\15\1\16\1\17\1\3\1\20"+
    "\1\21\1\22\2\0\1\23\1\24\1\25\1\26\1\27"+
    "\1\3\1\30\1\31\1\32\1\3\1\33\1\34\14\3"+
    "\15\0\2\3\5\0\12\3\1\u0127\1\3\2\0\30\3"+
    "\15\0\2\3\5\0\7\3\1\247\4\3\2\0\30\3"+
    "\15\0\2\3\5\0\12\3\1\275\1\3\2\0\30\3"+
    "\31\0\1\u0153\104\0\1\277\6\0\1\u0154\46\0\1\u0155"+
    "\70\0\1\u0156\71\0\1\u0157\73\0\1\u0158\71\0\1\u0147"+
    "\73\0\1\u0116\73\0\1\u0159\64\0\1\u015a\73\0\1\u015b"+
    "\102\0\1\u015c\72\0\1\u011a\56\0\1\u015d\11\0\1\u0159"+
    "\56\0\1\u015e\77\0\1\u012f\71\0\1\u015f\63\0\1\u0160"+
    "\72\0\1\u0161\73\0\1\277\67\0\1\u0157\75\0\1\u0162"+
    "\5\0\1\u0163\1\0\1\u0164\3\0\1\u0165\1\353\47\0"+
    "\1\u0147\77\0\1\u0166\103\0\1\u0167\71\0\1\u0168\50\0"+
    "\1\u0169\73\0\1\u0155\71\0\1\u0133\76\0\1\u016a\73\0"+
    "\1\260\61\0\1\u016b\70\0\1\u016c\72\0\1\u0101\63\0"+
    "\1\154\1\0\1\332\1\0\1\333\1\334\1\335\1\336"+
    "\1\337\1\340\1\0\1\341\1\u016d\1\343\2\0\1\344"+
    "\1\345\1\346\1\347\1\350\1\0\1\351\1\352\1\353"+
    "\1\0\1\354\1\355\43\0\1\u016e\74\0\1\u016f\67\0"+
    "\1\u011a\103\0\1\u0170\44\0\2\3\5\0\7\3\1\u0171"+
    "\4\3\2\0\30\3\15\0\2\3\5\0\5\3\1\241"+
    "\6\3\2\0\30\3\15\0\2\3\5\0\2\3\1\64"+
    "\4\3\1\u0172\4\3\2\0\30\3\36\0\1\u0173\62\0"+
    "\1\u0174\77\0\1\u0175\64\0\1\u0176\107\0\1\u0147\62\0"+
    "\1\u0177\63\0\1\277\67\0\1\u0178\67\0\1\277\107\0"+
    "\1\277\63\0\1\u0179\72\0\1\u017a\72\0\1\u017b\102\0"+
    "\1\u017c\50\0\1\u017d\6\0\1\u017e\104\0\1\277\72\0"+
    "\1\u0114\55\0\1\u017f\66\0\1\u011b\102\0\1\u0180\64\0"+
    "\1\u0181\67\0\1\u0182\103\0\1\277\65\0\1\u0183\55\0"+
    "\1\u0184\112\0\1\u0185\50\0\1\u0133\1\u010b\1\0\1\u010c"+
    "\1\0\1\u010d\7\0\1\u010e\6\0\1\u010f\1\u0110\45\0"+
    "\1\u0186\72\0\1\u0187\67\0\1\u0188\57\0\2\3\5\0"+
    "\10\3\1\u0189\3\3\2\0\30\3\15\0\2\3\5\0"+
    "\14\3\2\0\2\3\1\u0124\25\3\32\0\1\u018a\70\0"+
    "\1\u011a\72\0\1\277\70\0\1\u018b\67\0\1\u018c\104\0"+
    "\1\u014e\73\0\1\u018d\61\0\1\u018e\106\0\1\u018f\65\0"+
    "\1\u0190\70\0\1\u0191\54\0\1\u0192\74\0\1\u0148\104\0"+
    "\1\u015c\70\0\1\277\64\0\1\u0190\56\0\1\u018f\104\0"+
    "\1\u011a\62\0\1\u0159\63\0\1\154\1\0\1\332\1\0"+
    "\1\333\1\334\1\u0193\1\336\1\337\1\340\1\0\1\341"+
    "\1\342\1\343\2\0\1\344\1\345\1\346\1\347\1\350"+
    "\1\0\1\351\1\352\1\353\1\0\1\354\1\355\51\0"+
    "\1\u0194\64\0\1\277\56\0\2\3\5\0\1\u0195\13\3"+
    "\2\0\30\3\31\0\1\u0196\66\0\1\u0197\75\0\1\u0159"+
    "\107\0\1\u011a\57\0\1\u0198\62\0\1\u0199\100\0\1\u019a"+
    "\65\0\1\u019b\104\0\1\u019c\61\0\1\u0102\10\0\1\277"+
    "\56\0\1\u0181\53\0\2\3\5\0\11\3\1\u019d\2\3"+
    "\2\0\30\3\36\0\1\u0101\65\0\1\u019e\103\0\1\u019f"+
    "\57\0\1\u011a\61\0\1\154\1\0\1\332\1\0\1\u01a0"+
    "\1\334\1\335\1\336\1\337\1\340\1\0\1\341\1\342"+
    "\1\343\2\0\1\344\1\345\1\346\1\347\1\350\1\0"+
    "\1\351\1\352\1\353\1\0\1\354\1\355\52\0\1\u019c"+
    "\66\0\1\u0162\53\0\2\3\5\0\4\3\1\u01a1\7\3"+
    "\2\0\30\3\33\0\1\u01a2\67\0\1\u015c\66\0\1\376"+
    "\4\0\1\u01a3\53\0\2\3\5\0\12\3\1\u01a4\1\3"+
    "\2\0\30\3\34\0\1\u01a5\101\0\1\u0199\42\0\2\3"+
    "\5\0\13\3\1\205\2\0\30\3\24\0\1\u01a6\102\0"+
    "\1\u01a7\64\0\1\u01a8\77\0\1\u01a9\72\0\1\u0147\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23896];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\36\1\1\11"+
    "\2\1\1\11\2\1\3\11\1\1\2\0\56\1\3\11"+
    "\3\0\6\1\1\0\51\1\2\0\30\1\1\0\51\1"+
    "\24\0\16\1\45\0\10\1\42\0\1\1\4\0\3\1"+
    "\36\0\2\1\23\0\1\1\2\0\1\1\13\0\1\1"+
    "\4\0\1\1\2\0\1\1\3\0\1\1\2\0\1\1"+
    "\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 20: break;
          case 2: 
            { lexeme=yytext(); return ID;
            }
          case 21: break;
          case 3: 
            { lexeme=yytext(); return INT;
            }
          case 22: break;
          case 4: 
            { /*Ignore*/
            }
          case 23: break;
          case 5: 
            { return DIVIDED;
            }
          case 24: break;
          case 6: 
            { return MULTIPLE;
            }
          case 25: break;
          case 7: 
            { return MINUS;
            }
          case 26: break;
          case 8: 
            { return VAR;
            }
          case 27: break;
          case 9: 
            { return ASSIGN;
            }
          case 28: break;
          case 10: 
            { return PLUS;
            }
          case 29: break;
          case 11: 
            { return NOT;
            }
          case 30: break;
          case 12: 
            { return COMMA;
            }
          case 31: break;
          case 13: 
            { return SEMICOLON;
            }
          case 32: break;
          case 14: 
            { return DOUBLE_QUOTE;
            }
          case 33: break;
          case 15: 
            { lexeme=yytext(); return RESERVED;
            }
          case 34: break;
          case 16: 
            { return EQUALS;
            }
          case 35: break;
          case 17: 
            { return AND;
            }
          case 36: break;
          case 18: 
            { return OR;
            }
          case 37: break;
          case 19: 
            { lexeme=yytext(); return TYPE;
            }
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
